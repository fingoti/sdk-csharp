/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// WebhookAttempts
    /// </summary>
    [DataContract(Name = "WebhookAttempts")]
    public partial class WebhookAttempts : IEquatable<WebhookAttempts>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookAttempts" /> class.
        /// </summary>
        /// <param name="attempt">attempt.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="responseCode">responseCode.</param>
        /// <param name="responseDescription">responseDescription.</param>
        /// <param name="responseHeaders">responseHeaders.</param>
        /// <param name="responseBody">responseBody.</param>
        public WebhookAttempts(int attempt = default(int), DateTime? timestamp = default(DateTime?), int responseCode = default(int), string responseDescription = default(string), List<WebhookHeaders> responseHeaders = default(List<WebhookHeaders>), string responseBody = default(string))
        {
            this.Attempt = attempt;
            this.Timestamp = timestamp;
            this.ResponseCode = responseCode;
            this.ResponseDescription = responseDescription;
            this.ResponseHeaders = responseHeaders;
            this.ResponseBody = responseBody;
        }

        /// <summary>
        /// Gets or Sets Attempt
        /// </summary>
        [DataMember(Name = "attempt", EmitDefaultValue = false)]
        public int Attempt { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets ResponseCode
        /// </summary>
        [DataMember(Name = "responseCode", EmitDefaultValue = false)]
        public int ResponseCode { get; set; }

        /// <summary>
        /// Gets or Sets ResponseDescription
        /// </summary>
        [DataMember(Name = "responseDescription", EmitDefaultValue = true)]
        public string ResponseDescription { get; set; }

        /// <summary>
        /// Gets or Sets ResponseHeaders
        /// </summary>
        [DataMember(Name = "responseHeaders", EmitDefaultValue = true)]
        public List<WebhookHeaders> ResponseHeaders { get; set; }

        /// <summary>
        /// Gets or Sets ResponseBody
        /// </summary>
        [DataMember(Name = "responseBody", EmitDefaultValue = true)]
        public string ResponseBody { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookAttempts {\n");
            sb.Append("  Attempt: ").Append(Attempt).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  ResponseDescription: ").Append(ResponseDescription).Append("\n");
            sb.Append("  ResponseHeaders: ").Append(ResponseHeaders).Append("\n");
            sb.Append("  ResponseBody: ").Append(ResponseBody).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WebhookAttempts);
        }

        /// <summary>
        /// Returns true if WebhookAttempts instances are equal
        /// </summary>
        /// <param name="input">Instance of WebhookAttempts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookAttempts input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Attempt == input.Attempt ||
                    this.Attempt.Equals(input.Attempt)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.ResponseCode == input.ResponseCode ||
                    this.ResponseCode.Equals(input.ResponseCode)
                ) && 
                (
                    this.ResponseDescription == input.ResponseDescription ||
                    (this.ResponseDescription != null &&
                    this.ResponseDescription.Equals(input.ResponseDescription))
                ) && 
                (
                    this.ResponseHeaders == input.ResponseHeaders ||
                    this.ResponseHeaders != null &&
                    input.ResponseHeaders != null &&
                    this.ResponseHeaders.SequenceEqual(input.ResponseHeaders)
                ) && 
                (
                    this.ResponseBody == input.ResponseBody ||
                    (this.ResponseBody != null &&
                    this.ResponseBody.Equals(input.ResponseBody))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Attempt.GetHashCode();
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ResponseCode.GetHashCode();
                if (this.ResponseDescription != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseDescription.GetHashCode();
                }
                if (this.ResponseHeaders != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseHeaders.GetHashCode();
                }
                if (this.ResponseBody != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseBody.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
