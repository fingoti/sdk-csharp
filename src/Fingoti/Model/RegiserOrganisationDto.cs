/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// RegiserOrganisationDto
    /// </summary>
    [DataContract(Name = "RegiserOrganisationDto")]
    public partial class RegiserOrganisationDto : IEquatable<RegiserOrganisationDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegiserOrganisationDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegiserOrganisationDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegiserOrganisationDto" /> class.
        /// </summary>
        /// <param name="organisationName">organisationName (required).</param>
        /// <param name="organisationHandle">organisationHandle (required).</param>
        /// <param name="addressLine1">addressLine1 (required).</param>
        /// <param name="addressLine2">addressLine2.</param>
        /// <param name="city">city.</param>
        /// <param name="county">county.</param>
        /// <param name="postcode">postcode (required).</param>
        /// <param name="country">country.</param>
        /// <param name="vatNumber">vatNumber.</param>
        /// <param name="isBusiness">isBusiness.</param>
        public RegiserOrganisationDto(string organisationName = default(string), string organisationHandle = default(string), string addressLine1 = default(string), string addressLine2 = default(string), string city = default(string), string county = default(string), string postcode = default(string), string country = default(string), string vatNumber = default(string), bool isBusiness = default(bool))
        {
            // to ensure "organisationName" is required (not null)
            if (organisationName == null)
            {
                throw new ArgumentNullException("organisationName is a required property for RegiserOrganisationDto and cannot be null");
            }
            this.OrganisationName = organisationName;
            // to ensure "organisationHandle" is required (not null)
            if (organisationHandle == null)
            {
                throw new ArgumentNullException("organisationHandle is a required property for RegiserOrganisationDto and cannot be null");
            }
            this.OrganisationHandle = organisationHandle;
            // to ensure "addressLine1" is required (not null)
            if (addressLine1 == null)
            {
                throw new ArgumentNullException("addressLine1 is a required property for RegiserOrganisationDto and cannot be null");
            }
            this.AddressLine1 = addressLine1;
            // to ensure "postcode" is required (not null)
            if (postcode == null)
            {
                throw new ArgumentNullException("postcode is a required property for RegiserOrganisationDto and cannot be null");
            }
            this.Postcode = postcode;
            this.AddressLine2 = addressLine2;
            this.City = city;
            this.County = county;
            this.Country = country;
            this.VatNumber = vatNumber;
            this.IsBusiness = isBusiness;
        }

        /// <summary>
        /// Gets or Sets OrganisationName
        /// </summary>
        [DataMember(Name = "organisationName", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationName { get; set; }

        /// <summary>
        /// Gets or Sets OrganisationHandle
        /// </summary>
        [DataMember(Name = "organisationHandle", IsRequired = true, EmitDefaultValue = true)]
        public string OrganisationHandle { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine1
        /// </summary>
        [DataMember(Name = "addressLine1", IsRequired = true, EmitDefaultValue = true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine2
        /// </summary>
        [DataMember(Name = "addressLine2", EmitDefaultValue = true)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets County
        /// </summary>
        [DataMember(Name = "county", EmitDefaultValue = true)]
        public string County { get; set; }

        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name = "postcode", IsRequired = true, EmitDefaultValue = true)]
        public string Postcode { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets VatNumber
        /// </summary>
        [DataMember(Name = "vatNumber", EmitDefaultValue = true)]
        public string VatNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsBusiness
        /// </summary>
        [DataMember(Name = "isBusiness", EmitDefaultValue = true)]
        public bool IsBusiness { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegiserOrganisationDto {\n");
            sb.Append("  OrganisationName: ").Append(OrganisationName).Append("\n");
            sb.Append("  OrganisationHandle: ").Append(OrganisationHandle).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  IsBusiness: ").Append(IsBusiness).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegiserOrganisationDto);
        }

        /// <summary>
        /// Returns true if RegiserOrganisationDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RegiserOrganisationDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegiserOrganisationDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrganisationName == input.OrganisationName ||
                    (this.OrganisationName != null &&
                    this.OrganisationName.Equals(input.OrganisationName))
                ) && 
                (
                    this.OrganisationHandle == input.OrganisationHandle ||
                    (this.OrganisationHandle != null &&
                    this.OrganisationHandle.Equals(input.OrganisationHandle))
                ) && 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.County == input.County ||
                    (this.County != null &&
                    this.County.Equals(input.County))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.VatNumber == input.VatNumber ||
                    (this.VatNumber != null &&
                    this.VatNumber.Equals(input.VatNumber))
                ) && 
                (
                    this.IsBusiness == input.IsBusiness ||
                    this.IsBusiness.Equals(input.IsBusiness)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrganisationName != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationName.GetHashCode();
                }
                if (this.OrganisationHandle != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationHandle.GetHashCode();
                }
                if (this.AddressLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine1.GetHashCode();
                }
                if (this.AddressLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine2.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.County != null)
                {
                    hashCode = (hashCode * 59) + this.County.GetHashCode();
                }
                if (this.Postcode != null)
                {
                    hashCode = (hashCode * 59) + this.Postcode.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.VatNumber != null)
                {
                    hashCode = (hashCode * 59) + this.VatNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsBusiness.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
