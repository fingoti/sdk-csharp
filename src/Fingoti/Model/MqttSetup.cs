/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// MqttSetup
    /// </summary>
    [DataContract(Name = "MqttSetup")]
    public partial class MqttSetup : IEquatable<MqttSetup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MqttSetup" /> class.
        /// </summary>
        /// <param name="host">host.</param>
        /// <param name="qos">qos.</param>
        /// <param name="retain">retain.</param>
        /// <param name="port">port.</param>
        /// <param name="secure">secure.</param>
        /// <param name="username">username.</param>
        public MqttSetup(string host = default(string), int qos = default(int), bool retain = default(bool), int port = default(int), bool secure = default(bool), string username = default(string))
        {
            this.Host = host;
            this.Qos = qos;
            this.Retain = retain;
            this.Port = port;
            this.Secure = secure;
            this.Username = username;
        }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = true)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Qos
        /// </summary>
        [DataMember(Name = "qos", EmitDefaultValue = false)]
        public int Qos { get; set; }

        /// <summary>
        /// Gets or Sets Retain
        /// </summary>
        [DataMember(Name = "retain", EmitDefaultValue = true)]
        public bool Retain { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public int Port { get; set; }

        /// <summary>
        /// Gets or Sets Secure
        /// </summary>
        [DataMember(Name = "secure", EmitDefaultValue = true)]
        public bool Secure { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MqttSetup {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Qos: ").Append(Qos).Append("\n");
            sb.Append("  Retain: ").Append(Retain).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Secure: ").Append(Secure).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MqttSetup);
        }

        /// <summary>
        /// Returns true if MqttSetup instances are equal
        /// </summary>
        /// <param name="input">Instance of MqttSetup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MqttSetup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Qos == input.Qos ||
                    this.Qos.Equals(input.Qos)
                ) && 
                (
                    this.Retain == input.Retain ||
                    this.Retain.Equals(input.Retain)
                ) && 
                (
                    this.Port == input.Port ||
                    this.Port.Equals(input.Port)
                ) && 
                (
                    this.Secure == input.Secure ||
                    this.Secure.Equals(input.Secure)
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Host != null)
                {
                    hashCode = (hashCode * 59) + this.Host.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Qos.GetHashCode();
                hashCode = (hashCode * 59) + this.Retain.GetHashCode();
                hashCode = (hashCode * 59) + this.Port.GetHashCode();
                hashCode = (hashCode * 59) + this.Secure.GetHashCode();
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
