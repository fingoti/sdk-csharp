/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// PatchPresetRequest
    /// </summary>
    [DataContract(Name = "PatchPresetRequest")]
    public partial class PatchPresetRequest : IEquatable<PatchPresetRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchPresetRequest" /> class.
        /// </summary>
        /// <param name="disabled">disabled.</param>
        /// <param name="presetName">presetName.</param>
        /// <param name="ssid">ssid.</param>
        /// <param name="password">password.</param>
        public PatchPresetRequest(bool? disabled = default(bool?), string presetName = default(string), string ssid = default(string), string password = default(string))
        {
            this.Disabled = disabled;
            this.PresetName = presetName;
            this.Ssid = ssid;
            this.Password = password;
        }

        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name = "disabled", EmitDefaultValue = true)]
        public bool? Disabled { get; set; }

        /// <summary>
        /// Gets or Sets PresetName
        /// </summary>
        [DataMember(Name = "presetName", EmitDefaultValue = true)]
        public string PresetName { get; set; }

        /// <summary>
        /// Gets or Sets Ssid
        /// </summary>
        [DataMember(Name = "ssid", EmitDefaultValue = true)]
        public string Ssid { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchPresetRequest {\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  PresetName: ").Append(PresetName).Append("\n");
            sb.Append("  Ssid: ").Append(Ssid).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatchPresetRequest);
        }

        /// <summary>
        /// Returns true if PatchPresetRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PatchPresetRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatchPresetRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Disabled == input.Disabled ||
                    (this.Disabled != null &&
                    this.Disabled.Equals(input.Disabled))
                ) && 
                (
                    this.PresetName == input.PresetName ||
                    (this.PresetName != null &&
                    this.PresetName.Equals(input.PresetName))
                ) && 
                (
                    this.Ssid == input.Ssid ||
                    (this.Ssid != null &&
                    this.Ssid.Equals(input.Ssid))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Disabled != null)
                {
                    hashCode = (hashCode * 59) + this.Disabled.GetHashCode();
                }
                if (this.PresetName != null)
                {
                    hashCode = (hashCode * 59) + this.PresetName.GetHashCode();
                }
                if (this.Ssid != null)
                {
                    hashCode = (hashCode * 59) + this.Ssid.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
