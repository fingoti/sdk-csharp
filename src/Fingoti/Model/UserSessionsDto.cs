/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// UserSessionsDto
    /// </summary>
    [DataContract(Name = "UserSessionsDto")]
    public partial class UserSessionsDto : IEquatable<UserSessionsDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserSessionsDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userAgent">userAgent.</param>
        /// <param name="platform">platform.</param>
        /// <param name="_client">_client.</param>
        /// <param name="loginTime">loginTime.</param>
        /// <param name="lastActive">lastActive.</param>
        /// <param name="location">location.</param>
        /// <param name="ipAddress">ipAddress.</param>
        public UserSessionsDto(Guid id = default(Guid), string userAgent = default(string), string platform = default(string), string _client = default(string), DateTime? loginTime = default(DateTime?), DateTime? lastActive = default(DateTime?), string location = default(string), string ipAddress = default(string))
        {
            this.Id = id;
            this.UserAgent = userAgent;
            this.Platform = platform;
            this._Client = _client;
            this.LoginTime = loginTime;
            this.LastActive = lastActive;
            this.Location = location;
            this.IpAddress = ipAddress;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name = "userAgent", EmitDefaultValue = true)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name = "platform", EmitDefaultValue = true)]
        public string Platform { get; set; }

        /// <summary>
        /// Gets or Sets _Client
        /// </summary>
        [DataMember(Name = "client", EmitDefaultValue = true)]
        public string _Client { get; set; }

        /// <summary>
        /// Gets or Sets LoginTime
        /// </summary>
        [DataMember(Name = "loginTime", EmitDefaultValue = true)]
        public DateTime? LoginTime { get; set; }

        /// <summary>
        /// Gets or Sets LastActive
        /// </summary>
        [DataMember(Name = "lastActive", EmitDefaultValue = true)]
        public DateTime? LastActive { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = true)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name = "ipAddress", EmitDefaultValue = true)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserSessionsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  LoginTime: ").Append(LoginTime).Append("\n");
            sb.Append("  LastActive: ").Append(LastActive).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserSessionsDto);
        }

        /// <summary>
        /// Returns true if UserSessionsDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UserSessionsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserSessionsDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                ) && 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this._Client == input._Client ||
                    (this._Client != null &&
                    this._Client.Equals(input._Client))
                ) && 
                (
                    this.LoginTime == input.LoginTime ||
                    (this.LoginTime != null &&
                    this.LoginTime.Equals(input.LoginTime))
                ) && 
                (
                    this.LastActive == input.LastActive ||
                    (this.LastActive != null &&
                    this.LastActive.Equals(input.LastActive))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.UserAgent != null)
                {
                    hashCode = (hashCode * 59) + this.UserAgent.GetHashCode();
                }
                if (this.Platform != null)
                {
                    hashCode = (hashCode * 59) + this.Platform.GetHashCode();
                }
                if (this._Client != null)
                {
                    hashCode = (hashCode * 59) + this._Client.GetHashCode();
                }
                if (this.LoginTime != null)
                {
                    hashCode = (hashCode * 59) + this.LoginTime.GetHashCode();
                }
                if (this.LastActive != null)
                {
                    hashCode = (hashCode * 59) + this.LastActive.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this.IpAddress != null)
                {
                    hashCode = (hashCode * 59) + this.IpAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
