/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// GatewayI2c
    /// </summary>
    [DataContract(Name = "GatewayI2c")]
    public partial class GatewayI2c : IEquatable<GatewayI2c>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayI2c" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="data">data.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="setup">setup.</param>
        /// <param name="detect">detect.</param>
        public GatewayI2c(int address = default(int), List<List<int>> data = default(List<List<int>>), DateTime timestamp = default(DateTime), I2cSetup setup = default(I2cSetup), List<int> detect = default(List<int>))
        {
            this.Address = address;
            this.Data = data;
            this.Timestamp = timestamp;
            this.Setup = setup;
            this.Detect = detect;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public int Address { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public List<List<int>> Data { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Setup
        /// </summary>
        [DataMember(Name = "setup", EmitDefaultValue = false)]
        public I2cSetup Setup { get; set; }

        /// <summary>
        /// Gets or Sets Detect
        /// </summary>
        [DataMember(Name = "detect", EmitDefaultValue = true)]
        public List<int> Detect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayI2c {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Setup: ").Append(Setup).Append("\n");
            sb.Append("  Detect: ").Append(Detect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayI2c);
        }

        /// <summary>
        /// Returns true if GatewayI2c instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayI2c to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayI2c input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    this.Address.Equals(input.Address)
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Setup == input.Setup ||
                    (this.Setup != null &&
                    this.Setup.Equals(input.Setup))
                ) && 
                (
                    this.Detect == input.Detect ||
                    this.Detect != null &&
                    input.Detect != null &&
                    this.Detect.SequenceEqual(input.Detect)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Address.GetHashCode();
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Setup != null)
                {
                    hashCode = (hashCode * 59) + this.Setup.GetHashCode();
                }
                if (this.Detect != null)
                {
                    hashCode = (hashCode * 59) + this.Detect.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
