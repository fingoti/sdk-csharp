/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// GatewayWifi
    /// </summary>
    [DataContract(Name = "GatewayWifi")]
    public partial class GatewayWifi : IEquatable<GatewayWifi>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GatewayWifi" /> class.
        /// </summary>
        /// <param name="credentials">credentials.</param>
        /// <param name="status">status.</param>
        /// <param name="detect">detect.</param>
        public GatewayWifi(List<string> credentials = default(List<string>), WifiStatus status = default(WifiStatus), List<WifiDetect> detect = default(List<WifiDetect>))
        {
            this.Credentials = credentials;
            this.Status = status;
            this.Detect = detect;
        }

        /// <summary>
        /// Gets or Sets Credentials
        /// </summary>
        [DataMember(Name = "credentials", EmitDefaultValue = true)]
        public List<string> Credentials { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public WifiStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Detect
        /// </summary>
        [DataMember(Name = "detect", EmitDefaultValue = true)]
        public List<WifiDetect> Detect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GatewayWifi {\n");
            sb.Append("  Credentials: ").Append(Credentials).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Detect: ").Append(Detect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GatewayWifi);
        }

        /// <summary>
        /// Returns true if GatewayWifi instances are equal
        /// </summary>
        /// <param name="input">Instance of GatewayWifi to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GatewayWifi input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Credentials == input.Credentials ||
                    this.Credentials != null &&
                    input.Credentials != null &&
                    this.Credentials.SequenceEqual(input.Credentials)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Detect == input.Detect ||
                    this.Detect != null &&
                    input.Detect != null &&
                    this.Detect.SequenceEqual(input.Detect)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Credentials != null)
                {
                    hashCode = (hashCode * 59) + this.Credentials.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Detect != null)
                {
                    hashCode = (hashCode * 59) + this.Detect.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
