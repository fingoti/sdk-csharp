/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// AzureMessage
    /// </summary>
    [DataContract(Name = "AzureMessage")]
    public partial class AzureMessage : IEquatable<AzureMessage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AzureMessage" /> class.
        /// </summary>
        /// <param name="push">push.</param>
        /// <param name="response">response.</param>
        /// <param name="overflow">overflow.</param>
        public AzureMessage(List<AzureMessageContent> push = default(List<AzureMessageContent>), List<AzureMessageContent> response = default(List<AzureMessageContent>), List<AzureMessageContent> overflow = default(List<AzureMessageContent>))
        {
            this.Push = push;
            this.Response = response;
            this.Overflow = overflow;
        }

        /// <summary>
        /// Gets or Sets Push
        /// </summary>
        [DataMember(Name = "push", EmitDefaultValue = true)]
        public List<AzureMessageContent> Push { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name = "response", EmitDefaultValue = true)]
        public List<AzureMessageContent> Response { get; set; }

        /// <summary>
        /// Gets or Sets Overflow
        /// </summary>
        [DataMember(Name = "overflow", EmitDefaultValue = true)]
        public List<AzureMessageContent> Overflow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AzureMessage {\n");
            sb.Append("  Push: ").Append(Push).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Overflow: ").Append(Overflow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AzureMessage);
        }

        /// <summary>
        /// Returns true if AzureMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of AzureMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AzureMessage input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Push == input.Push ||
                    this.Push != null &&
                    input.Push != null &&
                    this.Push.SequenceEqual(input.Push)
                ) && 
                (
                    this.Response == input.Response ||
                    this.Response != null &&
                    input.Response != null &&
                    this.Response.SequenceEqual(input.Response)
                ) && 
                (
                    this.Overflow == input.Overflow ||
                    this.Overflow != null &&
                    input.Overflow != null &&
                    this.Overflow.SequenceEqual(input.Overflow)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Push != null)
                {
                    hashCode = (hashCode * 59) + this.Push.GetHashCode();
                }
                if (this.Response != null)
                {
                    hashCode = (hashCode * 59) + this.Response.GetHashCode();
                }
                if (this.Overflow != null)
                {
                    hashCode = (hashCode * 59) + this.Overflow.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
