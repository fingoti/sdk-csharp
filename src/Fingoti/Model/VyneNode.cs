/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// VyneNode
    /// </summary>
    [DataContract(Name = "VyneNode")]
    public partial class VyneNode : IEquatable<VyneNode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VyneNode" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="partNumber">partNumber.</param>
        /// <param name="gatewayId">gatewayId.</param>
        /// <param name="firstSeen">firstSeen.</param>
        /// <param name="lastUpdated">lastUpdated.</param>
        /// <param name="enable">enable.</param>
        /// <param name="name">name.</param>
        /// <param name="location">location.</param>
        /// <param name="version">version.</param>
        /// <param name="setup">setup.</param>
        /// <param name="address">address.</param>
        /// <param name="data">data.</param>
        /// <param name="power">power.</param>
        /// <param name="identify">identify.</param>
        /// <param name="pin">pin.</param>
        public VyneNode(string id = default(string), string partNumber = default(string), string gatewayId = default(string), DateTime? firstSeen = default(DateTime?), DateTime? lastUpdated = default(DateTime?), bool? enable = default(bool?), string name = default(string), NodeLocation location = default(NodeLocation), DeviceVersion version = default(DeviceVersion), int setup = default(int), NodeAddress address = default(NodeAddress), NodeData data = default(NodeData), DevicePower power = default(DevicePower), bool identify = default(bool), List<int> pin = default(List<int>))
        {
            this.Id = id;
            this.PartNumber = partNumber;
            this.GatewayId = gatewayId;
            this.FirstSeen = firstSeen;
            this.LastUpdated = lastUpdated;
            this.Enable = enable;
            this.Name = name;
            this.Location = location;
            this._Version = version;
            this.Setup = setup;
            this.Address = address;
            this.Data = data;
            this.Power = power;
            this.Identify = identify;
            this.Pin = pin;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PartNumber
        /// </summary>
        [DataMember(Name = "partNumber", EmitDefaultValue = true)]
        public string PartNumber { get; set; }

        /// <summary>
        /// Gets or Sets GatewayId
        /// </summary>
        [DataMember(Name = "gatewayId", EmitDefaultValue = true)]
        public string GatewayId { get; set; }

        /// <summary>
        /// Gets or Sets FirstSeen
        /// </summary>
        [DataMember(Name = "firstSeen", EmitDefaultValue = true)]
        public DateTime? FirstSeen { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdated
        /// </summary>
        [DataMember(Name = "lastUpdated", EmitDefaultValue = true)]
        public DateTime? LastUpdated { get; set; }

        /// <summary>
        /// Gets or Sets Enable
        /// </summary>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool? Enable { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public NodeLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public DeviceVersion _Version { get; set; }

        /// <summary>
        /// Gets or Sets Setup
        /// </summary>
        [DataMember(Name = "setup", EmitDefaultValue = false)]
        public int Setup { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public NodeAddress Address { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public NodeData Data { get; set; }

        /// <summary>
        /// Gets or Sets Power
        /// </summary>
        [DataMember(Name = "power", EmitDefaultValue = false)]
        public DevicePower Power { get; set; }

        /// <summary>
        /// Gets or Sets Identify
        /// </summary>
        [DataMember(Name = "identify", EmitDefaultValue = true)]
        public bool Identify { get; set; }

        /// <summary>
        /// Gets or Sets Pin
        /// </summary>
        [DataMember(Name = "pin", EmitDefaultValue = true)]
        public List<int> Pin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VyneNode {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  GatewayId: ").Append(GatewayId).Append("\n");
            sb.Append("  FirstSeen: ").Append(FirstSeen).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Setup: ").Append(Setup).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Power: ").Append(Power).Append("\n");
            sb.Append("  Identify: ").Append(Identify).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VyneNode);
        }

        /// <summary>
        /// Returns true if VyneNode instances are equal
        /// </summary>
        /// <param name="input">Instance of VyneNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VyneNode input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.GatewayId == input.GatewayId ||
                    (this.GatewayId != null &&
                    this.GatewayId.Equals(input.GatewayId))
                ) && 
                (
                    this.FirstSeen == input.FirstSeen ||
                    (this.FirstSeen != null &&
                    this.FirstSeen.Equals(input.FirstSeen))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                ) && 
                (
                    this.Enable == input.Enable ||
                    (this.Enable != null &&
                    this.Enable.Equals(input.Enable))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.Setup == input.Setup ||
                    this.Setup.Equals(input.Setup)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Power == input.Power ||
                    (this.Power != null &&
                    this.Power.Equals(input.Power))
                ) && 
                (
                    this.Identify == input.Identify ||
                    this.Identify.Equals(input.Identify)
                ) && 
                (
                    this.Pin == input.Pin ||
                    this.Pin != null &&
                    input.Pin != null &&
                    this.Pin.SequenceEqual(input.Pin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PartNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PartNumber.GetHashCode();
                }
                if (this.GatewayId != null)
                {
                    hashCode = (hashCode * 59) + this.GatewayId.GetHashCode();
                }
                if (this.FirstSeen != null)
                {
                    hashCode = (hashCode * 59) + this.FirstSeen.GetHashCode();
                }
                if (this.LastUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdated.GetHashCode();
                }
                if (this.Enable != null)
                {
                    hashCode = (hashCode * 59) + this.Enable.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Setup.GetHashCode();
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.Power != null)
                {
                    hashCode = (hashCode * 59) + this.Power.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Identify.GetHashCode();
                if (this.Pin != null)
                {
                    hashCode = (hashCode * 59) + this.Pin.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
