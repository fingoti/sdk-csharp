/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// DeviceVersion
    /// </summary>
    [DataContract(Name = "DeviceVersion")]
    public partial class DeviceVersion : IEquatable<DeviceVersion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceVersion" /> class.
        /// </summary>
        /// <param name="hardware">hardware.</param>
        /// <param name="software">software.</param>
        public DeviceVersion(string hardware = default(string), string software = default(string))
        {
            this.Hardware = hardware;
            this.Software = software;
        }

        /// <summary>
        /// Gets or Sets Hardware
        /// </summary>
        [DataMember(Name = "hardware", EmitDefaultValue = true)]
        public string Hardware { get; set; }

        /// <summary>
        /// Gets or Sets Software
        /// </summary>
        [DataMember(Name = "software", EmitDefaultValue = true)]
        public string Software { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceVersion {\n");
            sb.Append("  Hardware: ").Append(Hardware).Append("\n");
            sb.Append("  Software: ").Append(Software).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceVersion);
        }

        /// <summary>
        /// Returns true if DeviceVersion instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceVersion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Hardware == input.Hardware ||
                    (this.Hardware != null &&
                    this.Hardware.Equals(input.Hardware))
                ) && 
                (
                    this.Software == input.Software ||
                    (this.Software != null &&
                    this.Software.Equals(input.Software))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hardware != null)
                {
                    hashCode = (hashCode * 59) + this.Hardware.GetHashCode();
                }
                if (this.Software != null)
                {
                    hashCode = (hashCode * 59) + this.Software.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
