/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// NetworkIp
    /// </summary>
    [DataContract(Name = "NetworkIp")]
    public partial class NetworkIp : IEquatable<NetworkIp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NetworkIp" /> class.
        /// </summary>
        /// <param name="_public">_public.</param>
        /// <param name="local">local.</param>
        /// <param name="mask">mask.</param>
        /// <param name="gateway">gateway.</param>
        /// <param name="dns">dns.</param>
        /// <param name="dhcp">dhcp.</param>
        public NetworkIp(string _public = default(string), string local = default(string), string mask = default(string), string gateway = default(string), string dns = default(string), bool dhcp = default(bool))
        {
            this.Public = _public;
            this.Local = local;
            this.Mask = mask;
            this.Gateway = gateway;
            this.Dns = dns;
            this.Dhcp = dhcp;
        }

        /// <summary>
        /// Gets or Sets Public
        /// </summary>
        [DataMember(Name = "public", EmitDefaultValue = true)]
        public string Public { get; set; }

        /// <summary>
        /// Gets or Sets Local
        /// </summary>
        [DataMember(Name = "local", EmitDefaultValue = true)]
        public string Local { get; set; }

        /// <summary>
        /// Gets or Sets Mask
        /// </summary>
        [DataMember(Name = "mask", EmitDefaultValue = true)]
        public string Mask { get; set; }

        /// <summary>
        /// Gets or Sets Gateway
        /// </summary>
        [DataMember(Name = "gateway", EmitDefaultValue = true)]
        public string Gateway { get; set; }

        /// <summary>
        /// Gets or Sets Dns
        /// </summary>
        [DataMember(Name = "dns", EmitDefaultValue = true)]
        public string Dns { get; set; }

        /// <summary>
        /// Gets or Sets Dhcp
        /// </summary>
        [DataMember(Name = "dhcp", EmitDefaultValue = true)]
        public bool Dhcp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NetworkIp {\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  Local: ").Append(Local).Append("\n");
            sb.Append("  Mask: ").Append(Mask).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  Dhcp: ").Append(Dhcp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NetworkIp);
        }

        /// <summary>
        /// Returns true if NetworkIp instances are equal
        /// </summary>
        /// <param name="input">Instance of NetworkIp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NetworkIp input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Public == input.Public ||
                    (this.Public != null &&
                    this.Public.Equals(input.Public))
                ) && 
                (
                    this.Local == input.Local ||
                    (this.Local != null &&
                    this.Local.Equals(input.Local))
                ) && 
                (
                    this.Mask == input.Mask ||
                    (this.Mask != null &&
                    this.Mask.Equals(input.Mask))
                ) && 
                (
                    this.Gateway == input.Gateway ||
                    (this.Gateway != null &&
                    this.Gateway.Equals(input.Gateway))
                ) && 
                (
                    this.Dns == input.Dns ||
                    (this.Dns != null &&
                    this.Dns.Equals(input.Dns))
                ) && 
                (
                    this.Dhcp == input.Dhcp ||
                    this.Dhcp.Equals(input.Dhcp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Public != null)
                {
                    hashCode = (hashCode * 59) + this.Public.GetHashCode();
                }
                if (this.Local != null)
                {
                    hashCode = (hashCode * 59) + this.Local.GetHashCode();
                }
                if (this.Mask != null)
                {
                    hashCode = (hashCode * 59) + this.Mask.GetHashCode();
                }
                if (this.Gateway != null)
                {
                    hashCode = (hashCode * 59) + this.Gateway.GetHashCode();
                }
                if (this.Dns != null)
                {
                    hashCode = (hashCode * 59) + this.Dns.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Dhcp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
