/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// UartSetup
    /// </summary>
    [DataContract(Name = "UartSetup")]
    public partial class UartSetup : IEquatable<UartSetup>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UartSetup" /> class.
        /// </summary>
        /// <param name="baudrate">baudrate.</param>
        /// <param name="databits">databits.</param>
        /// <param name="parity">parity.</param>
        /// <param name="stopbits">stopbits.</param>
        public UartSetup(int baudrate = default(int), int databits = default(int), int parity = default(int), int stopbits = default(int))
        {
            this.Baudrate = baudrate;
            this.Databits = databits;
            this.Parity = parity;
            this.Stopbits = stopbits;
        }

        /// <summary>
        /// Gets or Sets Baudrate
        /// </summary>
        [DataMember(Name = "baudrate", EmitDefaultValue = false)]
        public int Baudrate { get; set; }

        /// <summary>
        /// Gets or Sets Databits
        /// </summary>
        [DataMember(Name = "databits", EmitDefaultValue = false)]
        public int Databits { get; set; }

        /// <summary>
        /// Gets or Sets Parity
        /// </summary>
        [DataMember(Name = "parity", EmitDefaultValue = false)]
        public int Parity { get; set; }

        /// <summary>
        /// Gets or Sets Stopbits
        /// </summary>
        [DataMember(Name = "stopbits", EmitDefaultValue = false)]
        public int Stopbits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UartSetup {\n");
            sb.Append("  Baudrate: ").Append(Baudrate).Append("\n");
            sb.Append("  Databits: ").Append(Databits).Append("\n");
            sb.Append("  Parity: ").Append(Parity).Append("\n");
            sb.Append("  Stopbits: ").Append(Stopbits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UartSetup);
        }

        /// <summary>
        /// Returns true if UartSetup instances are equal
        /// </summary>
        /// <param name="input">Instance of UartSetup to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UartSetup input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Baudrate == input.Baudrate ||
                    this.Baudrate.Equals(input.Baudrate)
                ) && 
                (
                    this.Databits == input.Databits ||
                    this.Databits.Equals(input.Databits)
                ) && 
                (
                    this.Parity == input.Parity ||
                    this.Parity.Equals(input.Parity)
                ) && 
                (
                    this.Stopbits == input.Stopbits ||
                    this.Stopbits.Equals(input.Stopbits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Baudrate.GetHashCode();
                hashCode = (hashCode * 59) + this.Databits.GetHashCode();
                hashCode = (hashCode * 59) + this.Parity.GetHashCode();
                hashCode = (hashCode * 59) + this.Stopbits.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
