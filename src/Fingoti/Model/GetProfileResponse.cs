/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// GetProfileResponse
    /// </summary>
    [DataContract(Name = "GetProfileResponse")]
    public partial class GetProfileResponse : IEquatable<GetProfileResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProfileResponse" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="disabled">disabled.</param>
        /// <param name="forename">forename.</param>
        /// <param name="surname">surname.</param>
        /// <param name="userHandle">userHandle.</param>
        /// <param name="email">email.</param>
        /// <param name="emailVerified">emailVerified.</param>
        /// <param name="mobile">mobile.</param>
        /// <param name="telephone">telephone.</param>
        /// <param name="marketing">marketing.</param>
        /// <param name="mfaEnabled">mfaEnabled.</param>
        /// <param name="lastLogin">lastLogin.</param>
        /// <param name="dateRegistered">dateRegistered.</param>
        /// <param name="defaultOrganisation">defaultOrganisation.</param>
        /// <param name="lastUsedOrganisation">lastUsedOrganisation.</param>
        /// <param name="success">success.</param>
        public GetProfileResponse(Guid id = default(Guid), bool disabled = default(bool), string forename = default(string), string surname = default(string), string userHandle = default(string), string email = default(string), bool emailVerified = default(bool), string mobile = default(string), string telephone = default(string), bool marketing = default(bool), bool mfaEnabled = default(bool), DateTime? lastLogin = default(DateTime?), DateTime? dateRegistered = default(DateTime?), Guid? defaultOrganisation = default(Guid?), Guid? lastUsedOrganisation = default(Guid?), bool success = default(bool))
        {
            this.Id = id;
            this.Disabled = disabled;
            this.Forename = forename;
            this.Surname = surname;
            this.UserHandle = userHandle;
            this.Email = email;
            this.EmailVerified = emailVerified;
            this.Mobile = mobile;
            this.Telephone = telephone;
            this.Marketing = marketing;
            this.MfaEnabled = mfaEnabled;
            this.LastLogin = lastLogin;
            this.DateRegistered = dateRegistered;
            this.DefaultOrganisation = defaultOrganisation;
            this.LastUsedOrganisation = lastUsedOrganisation;
            this.Success = success;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name = "disabled", EmitDefaultValue = true)]
        public bool Disabled { get; set; }

        /// <summary>
        /// Gets or Sets Forename
        /// </summary>
        [DataMember(Name = "forename", EmitDefaultValue = true)]
        public string Forename { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name = "surname", EmitDefaultValue = true)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets UserHandle
        /// </summary>
        [DataMember(Name = "userHandle", EmitDefaultValue = true)]
        public string UserHandle { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets EmailVerified
        /// </summary>
        [DataMember(Name = "emailVerified", EmitDefaultValue = true)]
        public bool EmailVerified { get; set; }

        /// <summary>
        /// Gets or Sets Mobile
        /// </summary>
        [DataMember(Name = "mobile", EmitDefaultValue = true)]
        public string Mobile { get; set; }

        /// <summary>
        /// Gets or Sets Telephone
        /// </summary>
        [DataMember(Name = "telephone", EmitDefaultValue = true)]
        public string Telephone { get; set; }

        /// <summary>
        /// Gets or Sets Marketing
        /// </summary>
        [DataMember(Name = "marketing", EmitDefaultValue = true)]
        public bool Marketing { get; set; }

        /// <summary>
        /// Gets or Sets MfaEnabled
        /// </summary>
        [DataMember(Name = "mfaEnabled", EmitDefaultValue = true)]
        public bool MfaEnabled { get; set; }

        /// <summary>
        /// Gets or Sets LastLogin
        /// </summary>
        [DataMember(Name = "lastLogin", EmitDefaultValue = true)]
        public DateTime? LastLogin { get; set; }

        /// <summary>
        /// Gets or Sets DateRegistered
        /// </summary>
        [DataMember(Name = "dateRegistered", EmitDefaultValue = true)]
        public DateTime? DateRegistered { get; set; }

        /// <summary>
        /// Gets or Sets DefaultOrganisation
        /// </summary>
        [DataMember(Name = "defaultOrganisation", EmitDefaultValue = true)]
        public Guid? DefaultOrganisation { get; set; }

        /// <summary>
        /// Gets or Sets LastUsedOrganisation
        /// </summary>
        [DataMember(Name = "lastUsedOrganisation", EmitDefaultValue = true)]
        public Guid? LastUsedOrganisation { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetProfileResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Forename: ").Append(Forename).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  UserHandle: ").Append(UserHandle).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailVerified: ").Append(EmailVerified).Append("\n");
            sb.Append("  Mobile: ").Append(Mobile).Append("\n");
            sb.Append("  Telephone: ").Append(Telephone).Append("\n");
            sb.Append("  Marketing: ").Append(Marketing).Append("\n");
            sb.Append("  MfaEnabled: ").Append(MfaEnabled).Append("\n");
            sb.Append("  LastLogin: ").Append(LastLogin).Append("\n");
            sb.Append("  DateRegistered: ").Append(DateRegistered).Append("\n");
            sb.Append("  DefaultOrganisation: ").Append(DefaultOrganisation).Append("\n");
            sb.Append("  LastUsedOrganisation: ").Append(LastUsedOrganisation).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetProfileResponse);
        }

        /// <summary>
        /// Returns true if GetProfileResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetProfileResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProfileResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    this.Disabled.Equals(input.Disabled)
                ) && 
                (
                    this.Forename == input.Forename ||
                    (this.Forename != null &&
                    this.Forename.Equals(input.Forename))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.UserHandle == input.UserHandle ||
                    (this.UserHandle != null &&
                    this.UserHandle.Equals(input.UserHandle))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EmailVerified == input.EmailVerified ||
                    this.EmailVerified.Equals(input.EmailVerified)
                ) && 
                (
                    this.Mobile == input.Mobile ||
                    (this.Mobile != null &&
                    this.Mobile.Equals(input.Mobile))
                ) && 
                (
                    this.Telephone == input.Telephone ||
                    (this.Telephone != null &&
                    this.Telephone.Equals(input.Telephone))
                ) && 
                (
                    this.Marketing == input.Marketing ||
                    this.Marketing.Equals(input.Marketing)
                ) && 
                (
                    this.MfaEnabled == input.MfaEnabled ||
                    this.MfaEnabled.Equals(input.MfaEnabled)
                ) && 
                (
                    this.LastLogin == input.LastLogin ||
                    (this.LastLogin != null &&
                    this.LastLogin.Equals(input.LastLogin))
                ) && 
                (
                    this.DateRegistered == input.DateRegistered ||
                    (this.DateRegistered != null &&
                    this.DateRegistered.Equals(input.DateRegistered))
                ) && 
                (
                    this.DefaultOrganisation == input.DefaultOrganisation ||
                    (this.DefaultOrganisation != null &&
                    this.DefaultOrganisation.Equals(input.DefaultOrganisation))
                ) && 
                (
                    this.LastUsedOrganisation == input.LastUsedOrganisation ||
                    (this.LastUsedOrganisation != null &&
                    this.LastUsedOrganisation.Equals(input.LastUsedOrganisation))
                ) && 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Disabled.GetHashCode();
                if (this.Forename != null)
                {
                    hashCode = (hashCode * 59) + this.Forename.GetHashCode();
                }
                if (this.Surname != null)
                {
                    hashCode = (hashCode * 59) + this.Surname.GetHashCode();
                }
                if (this.UserHandle != null)
                {
                    hashCode = (hashCode * 59) + this.UserHandle.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EmailVerified.GetHashCode();
                if (this.Mobile != null)
                {
                    hashCode = (hashCode * 59) + this.Mobile.GetHashCode();
                }
                if (this.Telephone != null)
                {
                    hashCode = (hashCode * 59) + this.Telephone.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Marketing.GetHashCode();
                hashCode = (hashCode * 59) + this.MfaEnabled.GetHashCode();
                if (this.LastLogin != null)
                {
                    hashCode = (hashCode * 59) + this.LastLogin.GetHashCode();
                }
                if (this.DateRegistered != null)
                {
                    hashCode = (hashCode * 59) + this.DateRegistered.GetHashCode();
                }
                if (this.DefaultOrganisation != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultOrganisation.GetHashCode();
                }
                if (this.LastUsedOrganisation != null)
                {
                    hashCode = (hashCode * 59) + this.LastUsedOrganisation.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Success.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
