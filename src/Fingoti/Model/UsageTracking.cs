/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Fingoti.Client.OpenAPIDateConverter;

namespace Fingoti.Model
{
    /// <summary>
    /// UsageTracking
    /// </summary>
    [DataContract(Name = "UsageTracking")]
    public partial class UsageTracking : IEquatable<UsageTracking>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsageTracking" /> class.
        /// </summary>
        /// <param name="usageId">usageId.</param>
        /// <param name="organisationId">organisationId.</param>
        /// <param name="day">day.</param>
        /// <param name="deviceId">deviceId.</param>
        /// <param name="total">total.</param>
        /// <param name="unknown">unknown.</param>
        /// <param name="deviceActivity">deviceActivity.</param>
        /// <param name="deviceBalance">deviceBalance.</param>
        /// <param name="deviceBlink">deviceBlink.</param>
        /// <param name="deviceBrightness">deviceBrightness.</param>
        /// <param name="deviceBus">deviceBus.</param>
        /// <param name="deviceClaim">deviceClaim.</param>
        /// <param name="deviceCloud">deviceCloud.</param>
        /// <param name="deviceColour">deviceColour.</param>
        /// <param name="deviceFactory">deviceFactory.</param>
        /// <param name="deviceInformation">deviceInformation.</param>
        /// <param name="deviceKey">deviceKey.</param>
        /// <param name="devicePoke">devicePoke.</param>
        /// <param name="devicePower">devicePower.</param>
        /// <param name="deviceSerial">deviceSerial.</param>
        /// <param name="deviceSetup">deviceSetup.</param>
        /// <param name="deviceSleep">deviceSleep.</param>
        /// <param name="deviceTemperature">deviceTemperature.</param>
        /// <param name="deviceTime">deviceTime.</param>
        /// <param name="deviceUpdate">deviceUpdate.</param>
        /// <param name="deviceUptime">deviceUptime.</param>
        /// <param name="deviceVersion">deviceVersion.</param>
        /// <param name="networkTraffic">networkTraffic.</param>
        /// <param name="networkInternet">networkInternet.</param>
        /// <param name="networkIp">networkIp.</param>
        /// <param name="networkMac">networkMac.</param>
        /// <param name="i2cData">i2cData.</param>
        /// <param name="i2cDetect">i2cDetect.</param>
        /// <param name="i2cSetup">i2cSetup.</param>
        /// <param name="gpioDirection">gpioDirection.</param>
        /// <param name="gpioPulse">gpioPulse.</param>
        /// <param name="gpioState">gpioState.</param>
        /// <param name="gpioToggle">gpioToggle.</param>
        /// <param name="timerInterval">timerInterval.</param>
        /// <param name="timerRequest">timerRequest.</param>
        /// <param name="timerStatus">timerStatus.</param>
        /// <param name="wifiCredentials">wifiCredentials.</param>
        /// <param name="wifiDetect">wifiDetect.</param>
        /// <param name="wifiStatus">wifiStatus.</param>
        /// <param name="uartData">uartData.</param>
        /// <param name="uartMode">uartMode.</param>
        /// <param name="uartSession">uartSession.</param>
        /// <param name="uartSetup">uartSetup.</param>
        /// <param name="uartTrigger">uartTrigger.</param>
        /// <param name="scheduleCron">scheduleCron.</param>
        /// <param name="scheduleRequest">scheduleRequest.</param>
        /// <param name="scheduleSetup">scheduleSetup.</param>
        /// <param name="scheduleStatus">scheduleStatus.</param>
        /// <param name="mqttCertificate">mqttCertificate.</param>
        /// <param name="mqttSession">mqttSession.</param>
        /// <param name="mqttSetup">mqttSetup.</param>
        /// <param name="mqttStatus">mqttStatus.</param>
        /// <param name="nodeAddress">nodeAddress.</param>
        /// <param name="nodeData">nodeData.</param>
        /// <param name="nodeDetect">nodeDetect.</param>
        /// <param name="nodeEnable">nodeEnable.</param>
        /// <param name="nodeIdentify">nodeIdentify.</param>
        /// <param name="nodeInformation">nodeInformation.</param>
        /// <param name="nodeLatch">nodeLatch.</param>
        /// <param name="nodePower">nodePower.</param>
        /// <param name="nodeSetup">nodeSetup.</param>
        public UsageTracking(Guid usageId = default(Guid), Guid organisationId = default(Guid), DateTime day = default(DateTime), string deviceId = default(string), int total = default(int), int unknown = default(int), int deviceActivity = default(int), int deviceBalance = default(int), int deviceBlink = default(int), int deviceBrightness = default(int), int deviceBus = default(int), int deviceClaim = default(int), int deviceCloud = default(int), int deviceColour = default(int), int deviceFactory = default(int), int deviceInformation = default(int), int deviceKey = default(int), int devicePoke = default(int), int devicePower = default(int), int deviceSerial = default(int), int deviceSetup = default(int), int deviceSleep = default(int), int deviceTemperature = default(int), int deviceTime = default(int), int deviceUpdate = default(int), int deviceUptime = default(int), int deviceVersion = default(int), int networkTraffic = default(int), int networkInternet = default(int), int networkIp = default(int), int networkMac = default(int), int i2cData = default(int), int i2cDetect = default(int), int i2cSetup = default(int), int gpioDirection = default(int), int gpioPulse = default(int), int gpioState = default(int), int gpioToggle = default(int), int timerInterval = default(int), int timerRequest = default(int), int timerStatus = default(int), int wifiCredentials = default(int), int wifiDetect = default(int), int wifiStatus = default(int), int uartData = default(int), int uartMode = default(int), int uartSession = default(int), int uartSetup = default(int), int uartTrigger = default(int), int scheduleCron = default(int), int scheduleRequest = default(int), int scheduleSetup = default(int), int scheduleStatus = default(int), int mqttCertificate = default(int), int mqttSession = default(int), int mqttSetup = default(int), int mqttStatus = default(int), int nodeAddress = default(int), int nodeData = default(int), int nodeDetect = default(int), int nodeEnable = default(int), int nodeIdentify = default(int), int nodeInformation = default(int), int nodeLatch = default(int), int nodePower = default(int), int nodeSetup = default(int))
        {
            this.UsageId = usageId;
            this.OrganisationId = organisationId;
            this.Day = day;
            this.DeviceId = deviceId;
            this.Total = total;
            this.Unknown = unknown;
            this.DeviceActivity = deviceActivity;
            this.DeviceBalance = deviceBalance;
            this.DeviceBlink = deviceBlink;
            this.DeviceBrightness = deviceBrightness;
            this.DeviceBus = deviceBus;
            this.DeviceClaim = deviceClaim;
            this.DeviceCloud = deviceCloud;
            this.DeviceColour = deviceColour;
            this.DeviceFactory = deviceFactory;
            this.DeviceInformation = deviceInformation;
            this.DeviceKey = deviceKey;
            this.DevicePoke = devicePoke;
            this.DevicePower = devicePower;
            this.DeviceSerial = deviceSerial;
            this.DeviceSetup = deviceSetup;
            this.DeviceSleep = deviceSleep;
            this.DeviceTemperature = deviceTemperature;
            this.DeviceTime = deviceTime;
            this.DeviceUpdate = deviceUpdate;
            this.DeviceUptime = deviceUptime;
            this.DeviceVersion = deviceVersion;
            this.NetworkTraffic = networkTraffic;
            this.NetworkInternet = networkInternet;
            this.NetworkIp = networkIp;
            this.NetworkMac = networkMac;
            this.I2cData = i2cData;
            this.I2cDetect = i2cDetect;
            this.I2cSetup = i2cSetup;
            this.GpioDirection = gpioDirection;
            this.GpioPulse = gpioPulse;
            this.GpioState = gpioState;
            this.GpioToggle = gpioToggle;
            this.TimerInterval = timerInterval;
            this.TimerRequest = timerRequest;
            this.TimerStatus = timerStatus;
            this.WifiCredentials = wifiCredentials;
            this.WifiDetect = wifiDetect;
            this.WifiStatus = wifiStatus;
            this.UartData = uartData;
            this.UartMode = uartMode;
            this.UartSession = uartSession;
            this.UartSetup = uartSetup;
            this.UartTrigger = uartTrigger;
            this.ScheduleCron = scheduleCron;
            this.ScheduleRequest = scheduleRequest;
            this.ScheduleSetup = scheduleSetup;
            this.ScheduleStatus = scheduleStatus;
            this.MqttCertificate = mqttCertificate;
            this.MqttSession = mqttSession;
            this.MqttSetup = mqttSetup;
            this.MqttStatus = mqttStatus;
            this.NodeAddress = nodeAddress;
            this.NodeData = nodeData;
            this.NodeDetect = nodeDetect;
            this.NodeEnable = nodeEnable;
            this.NodeIdentify = nodeIdentify;
            this.NodeInformation = nodeInformation;
            this.NodeLatch = nodeLatch;
            this.NodePower = nodePower;
            this.NodeSetup = nodeSetup;
        }

        /// <summary>
        /// Gets or Sets UsageId
        /// </summary>
        [DataMember(Name = "usageId", EmitDefaultValue = false)]
        public Guid UsageId { get; set; }

        /// <summary>
        /// Gets or Sets OrganisationId
        /// </summary>
        [DataMember(Name = "organisationId", EmitDefaultValue = false)]
        public Guid OrganisationId { get; set; }

        /// <summary>
        /// Gets or Sets Day
        /// </summary>
        [DataMember(Name = "day", EmitDefaultValue = false)]
        public DateTime Day { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [DataMember(Name = "deviceId", EmitDefaultValue = true)]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets Total
        /// </summary>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public int Total { get; set; }

        /// <summary>
        /// Gets or Sets Unknown
        /// </summary>
        [DataMember(Name = "unknown", EmitDefaultValue = false)]
        public int Unknown { get; set; }

        /// <summary>
        /// Gets or Sets DeviceActivity
        /// </summary>
        [DataMember(Name = "deviceActivity", EmitDefaultValue = false)]
        public int DeviceActivity { get; set; }

        /// <summary>
        /// Gets or Sets DeviceBalance
        /// </summary>
        [DataMember(Name = "deviceBalance", EmitDefaultValue = false)]
        public int DeviceBalance { get; set; }

        /// <summary>
        /// Gets or Sets DeviceBlink
        /// </summary>
        [DataMember(Name = "deviceBlink", EmitDefaultValue = false)]
        public int DeviceBlink { get; set; }

        /// <summary>
        /// Gets or Sets DeviceBrightness
        /// </summary>
        [DataMember(Name = "deviceBrightness", EmitDefaultValue = false)]
        public int DeviceBrightness { get; set; }

        /// <summary>
        /// Gets or Sets DeviceBus
        /// </summary>
        [DataMember(Name = "deviceBus", EmitDefaultValue = false)]
        public int DeviceBus { get; set; }

        /// <summary>
        /// Gets or Sets DeviceClaim
        /// </summary>
        [DataMember(Name = "deviceClaim", EmitDefaultValue = false)]
        public int DeviceClaim { get; set; }

        /// <summary>
        /// Gets or Sets DeviceCloud
        /// </summary>
        [DataMember(Name = "deviceCloud", EmitDefaultValue = false)]
        public int DeviceCloud { get; set; }

        /// <summary>
        /// Gets or Sets DeviceColour
        /// </summary>
        [DataMember(Name = "deviceColour", EmitDefaultValue = false)]
        public int DeviceColour { get; set; }

        /// <summary>
        /// Gets or Sets DeviceFactory
        /// </summary>
        [DataMember(Name = "deviceFactory", EmitDefaultValue = false)]
        public int DeviceFactory { get; set; }

        /// <summary>
        /// Gets or Sets DeviceInformation
        /// </summary>
        [DataMember(Name = "deviceInformation", EmitDefaultValue = false)]
        public int DeviceInformation { get; set; }

        /// <summary>
        /// Gets or Sets DeviceKey
        /// </summary>
        [DataMember(Name = "deviceKey", EmitDefaultValue = false)]
        public int DeviceKey { get; set; }

        /// <summary>
        /// Gets or Sets DevicePoke
        /// </summary>
        [DataMember(Name = "devicePoke", EmitDefaultValue = false)]
        public int DevicePoke { get; set; }

        /// <summary>
        /// Gets or Sets DevicePower
        /// </summary>
        [DataMember(Name = "devicePower", EmitDefaultValue = false)]
        public int DevicePower { get; set; }

        /// <summary>
        /// Gets or Sets DeviceSerial
        /// </summary>
        [DataMember(Name = "deviceSerial", EmitDefaultValue = false)]
        public int DeviceSerial { get; set; }

        /// <summary>
        /// Gets or Sets DeviceSetup
        /// </summary>
        [DataMember(Name = "deviceSetup", EmitDefaultValue = false)]
        public int DeviceSetup { get; set; }

        /// <summary>
        /// Gets or Sets DeviceSleep
        /// </summary>
        [DataMember(Name = "deviceSleep", EmitDefaultValue = false)]
        public int DeviceSleep { get; set; }

        /// <summary>
        /// Gets or Sets DeviceTemperature
        /// </summary>
        [DataMember(Name = "deviceTemperature", EmitDefaultValue = false)]
        public int DeviceTemperature { get; set; }

        /// <summary>
        /// Gets or Sets DeviceTime
        /// </summary>
        [DataMember(Name = "deviceTime", EmitDefaultValue = false)]
        public int DeviceTime { get; set; }

        /// <summary>
        /// Gets or Sets DeviceUpdate
        /// </summary>
        [DataMember(Name = "deviceUpdate", EmitDefaultValue = false)]
        public int DeviceUpdate { get; set; }

        /// <summary>
        /// Gets or Sets DeviceUptime
        /// </summary>
        [DataMember(Name = "deviceUptime", EmitDefaultValue = false)]
        public int DeviceUptime { get; set; }

        /// <summary>
        /// Gets or Sets DeviceVersion
        /// </summary>
        [DataMember(Name = "deviceVersion", EmitDefaultValue = false)]
        public int DeviceVersion { get; set; }

        /// <summary>
        /// Gets or Sets NetworkTraffic
        /// </summary>
        [DataMember(Name = "networkTraffic", EmitDefaultValue = false)]
        public int NetworkTraffic { get; set; }

        /// <summary>
        /// Gets or Sets NetworkInternet
        /// </summary>
        [DataMember(Name = "networkInternet", EmitDefaultValue = false)]
        public int NetworkInternet { get; set; }

        /// <summary>
        /// Gets or Sets NetworkIp
        /// </summary>
        [DataMember(Name = "networkIp", EmitDefaultValue = false)]
        public int NetworkIp { get; set; }

        /// <summary>
        /// Gets or Sets NetworkMac
        /// </summary>
        [DataMember(Name = "networkMac", EmitDefaultValue = false)]
        public int NetworkMac { get; set; }

        /// <summary>
        /// Gets or Sets I2cData
        /// </summary>
        [DataMember(Name = "i2cData", EmitDefaultValue = false)]
        public int I2cData { get; set; }

        /// <summary>
        /// Gets or Sets I2cDetect
        /// </summary>
        [DataMember(Name = "i2cDetect", EmitDefaultValue = false)]
        public int I2cDetect { get; set; }

        /// <summary>
        /// Gets or Sets I2cSetup
        /// </summary>
        [DataMember(Name = "i2cSetup", EmitDefaultValue = false)]
        public int I2cSetup { get; set; }

        /// <summary>
        /// Gets or Sets GpioDirection
        /// </summary>
        [DataMember(Name = "gpioDirection", EmitDefaultValue = false)]
        public int GpioDirection { get; set; }

        /// <summary>
        /// Gets or Sets GpioPulse
        /// </summary>
        [DataMember(Name = "gpioPulse", EmitDefaultValue = false)]
        public int GpioPulse { get; set; }

        /// <summary>
        /// Gets or Sets GpioState
        /// </summary>
        [DataMember(Name = "gpioState", EmitDefaultValue = false)]
        public int GpioState { get; set; }

        /// <summary>
        /// Gets or Sets GpioToggle
        /// </summary>
        [DataMember(Name = "gpioToggle", EmitDefaultValue = false)]
        public int GpioToggle { get; set; }

        /// <summary>
        /// Gets or Sets TimerInterval
        /// </summary>
        [DataMember(Name = "timerInterval", EmitDefaultValue = false)]
        public int TimerInterval { get; set; }

        /// <summary>
        /// Gets or Sets TimerRequest
        /// </summary>
        [DataMember(Name = "timerRequest", EmitDefaultValue = false)]
        public int TimerRequest { get; set; }

        /// <summary>
        /// Gets or Sets TimerStatus
        /// </summary>
        [DataMember(Name = "timerStatus", EmitDefaultValue = false)]
        public int TimerStatus { get; set; }

        /// <summary>
        /// Gets or Sets WifiCredentials
        /// </summary>
        [DataMember(Name = "wifiCredentials", EmitDefaultValue = false)]
        public int WifiCredentials { get; set; }

        /// <summary>
        /// Gets or Sets WifiDetect
        /// </summary>
        [DataMember(Name = "wifiDetect", EmitDefaultValue = false)]
        public int WifiDetect { get; set; }

        /// <summary>
        /// Gets or Sets WifiStatus
        /// </summary>
        [DataMember(Name = "wifiStatus", EmitDefaultValue = false)]
        public int WifiStatus { get; set; }

        /// <summary>
        /// Gets or Sets UartData
        /// </summary>
        [DataMember(Name = "uartData", EmitDefaultValue = false)]
        public int UartData { get; set; }

        /// <summary>
        /// Gets or Sets UartMode
        /// </summary>
        [DataMember(Name = "uartMode", EmitDefaultValue = false)]
        public int UartMode { get; set; }

        /// <summary>
        /// Gets or Sets UartSession
        /// </summary>
        [DataMember(Name = "uartSession", EmitDefaultValue = false)]
        public int UartSession { get; set; }

        /// <summary>
        /// Gets or Sets UartSetup
        /// </summary>
        [DataMember(Name = "uartSetup", EmitDefaultValue = false)]
        public int UartSetup { get; set; }

        /// <summary>
        /// Gets or Sets UartTrigger
        /// </summary>
        [DataMember(Name = "uartTrigger", EmitDefaultValue = false)]
        public int UartTrigger { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleCron
        /// </summary>
        [DataMember(Name = "scheduleCron", EmitDefaultValue = false)]
        public int ScheduleCron { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleRequest
        /// </summary>
        [DataMember(Name = "scheduleRequest", EmitDefaultValue = false)]
        public int ScheduleRequest { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleSetup
        /// </summary>
        [DataMember(Name = "scheduleSetup", EmitDefaultValue = false)]
        public int ScheduleSetup { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleStatus
        /// </summary>
        [DataMember(Name = "scheduleStatus", EmitDefaultValue = false)]
        public int ScheduleStatus { get; set; }

        /// <summary>
        /// Gets or Sets MqttCertificate
        /// </summary>
        [DataMember(Name = "mqttCertificate", EmitDefaultValue = false)]
        public int MqttCertificate { get; set; }

        /// <summary>
        /// Gets or Sets MqttSession
        /// </summary>
        [DataMember(Name = "mqttSession", EmitDefaultValue = false)]
        public int MqttSession { get; set; }

        /// <summary>
        /// Gets or Sets MqttSetup
        /// </summary>
        [DataMember(Name = "mqttSetup", EmitDefaultValue = false)]
        public int MqttSetup { get; set; }

        /// <summary>
        /// Gets or Sets MqttStatus
        /// </summary>
        [DataMember(Name = "mqttStatus", EmitDefaultValue = false)]
        public int MqttStatus { get; set; }

        /// <summary>
        /// Gets or Sets NodeAddress
        /// </summary>
        [DataMember(Name = "nodeAddress", EmitDefaultValue = false)]
        public int NodeAddress { get; set; }

        /// <summary>
        /// Gets or Sets NodeData
        /// </summary>
        [DataMember(Name = "nodeData", EmitDefaultValue = false)]
        public int NodeData { get; set; }

        /// <summary>
        /// Gets or Sets NodeDetect
        /// </summary>
        [DataMember(Name = "nodeDetect", EmitDefaultValue = false)]
        public int NodeDetect { get; set; }

        /// <summary>
        /// Gets or Sets NodeEnable
        /// </summary>
        [DataMember(Name = "nodeEnable", EmitDefaultValue = false)]
        public int NodeEnable { get; set; }

        /// <summary>
        /// Gets or Sets NodeIdentify
        /// </summary>
        [DataMember(Name = "nodeIdentify", EmitDefaultValue = false)]
        public int NodeIdentify { get; set; }

        /// <summary>
        /// Gets or Sets NodeInformation
        /// </summary>
        [DataMember(Name = "nodeInformation", EmitDefaultValue = false)]
        public int NodeInformation { get; set; }

        /// <summary>
        /// Gets or Sets NodeLatch
        /// </summary>
        [DataMember(Name = "nodeLatch", EmitDefaultValue = false)]
        public int NodeLatch { get; set; }

        /// <summary>
        /// Gets or Sets NodePower
        /// </summary>
        [DataMember(Name = "nodePower", EmitDefaultValue = false)]
        public int NodePower { get; set; }

        /// <summary>
        /// Gets or Sets NodeSetup
        /// </summary>
        [DataMember(Name = "nodeSetup", EmitDefaultValue = false)]
        public int NodeSetup { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsageTracking {\n");
            sb.Append("  UsageId: ").Append(UsageId).Append("\n");
            sb.Append("  OrganisationId: ").Append(OrganisationId).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Unknown: ").Append(Unknown).Append("\n");
            sb.Append("  DeviceActivity: ").Append(DeviceActivity).Append("\n");
            sb.Append("  DeviceBalance: ").Append(DeviceBalance).Append("\n");
            sb.Append("  DeviceBlink: ").Append(DeviceBlink).Append("\n");
            sb.Append("  DeviceBrightness: ").Append(DeviceBrightness).Append("\n");
            sb.Append("  DeviceBus: ").Append(DeviceBus).Append("\n");
            sb.Append("  DeviceClaim: ").Append(DeviceClaim).Append("\n");
            sb.Append("  DeviceCloud: ").Append(DeviceCloud).Append("\n");
            sb.Append("  DeviceColour: ").Append(DeviceColour).Append("\n");
            sb.Append("  DeviceFactory: ").Append(DeviceFactory).Append("\n");
            sb.Append("  DeviceInformation: ").Append(DeviceInformation).Append("\n");
            sb.Append("  DeviceKey: ").Append(DeviceKey).Append("\n");
            sb.Append("  DevicePoke: ").Append(DevicePoke).Append("\n");
            sb.Append("  DevicePower: ").Append(DevicePower).Append("\n");
            sb.Append("  DeviceSerial: ").Append(DeviceSerial).Append("\n");
            sb.Append("  DeviceSetup: ").Append(DeviceSetup).Append("\n");
            sb.Append("  DeviceSleep: ").Append(DeviceSleep).Append("\n");
            sb.Append("  DeviceTemperature: ").Append(DeviceTemperature).Append("\n");
            sb.Append("  DeviceTime: ").Append(DeviceTime).Append("\n");
            sb.Append("  DeviceUpdate: ").Append(DeviceUpdate).Append("\n");
            sb.Append("  DeviceUptime: ").Append(DeviceUptime).Append("\n");
            sb.Append("  DeviceVersion: ").Append(DeviceVersion).Append("\n");
            sb.Append("  NetworkTraffic: ").Append(NetworkTraffic).Append("\n");
            sb.Append("  NetworkInternet: ").Append(NetworkInternet).Append("\n");
            sb.Append("  NetworkIp: ").Append(NetworkIp).Append("\n");
            sb.Append("  NetworkMac: ").Append(NetworkMac).Append("\n");
            sb.Append("  I2cData: ").Append(I2cData).Append("\n");
            sb.Append("  I2cDetect: ").Append(I2cDetect).Append("\n");
            sb.Append("  I2cSetup: ").Append(I2cSetup).Append("\n");
            sb.Append("  GpioDirection: ").Append(GpioDirection).Append("\n");
            sb.Append("  GpioPulse: ").Append(GpioPulse).Append("\n");
            sb.Append("  GpioState: ").Append(GpioState).Append("\n");
            sb.Append("  GpioToggle: ").Append(GpioToggle).Append("\n");
            sb.Append("  TimerInterval: ").Append(TimerInterval).Append("\n");
            sb.Append("  TimerRequest: ").Append(TimerRequest).Append("\n");
            sb.Append("  TimerStatus: ").Append(TimerStatus).Append("\n");
            sb.Append("  WifiCredentials: ").Append(WifiCredentials).Append("\n");
            sb.Append("  WifiDetect: ").Append(WifiDetect).Append("\n");
            sb.Append("  WifiStatus: ").Append(WifiStatus).Append("\n");
            sb.Append("  UartData: ").Append(UartData).Append("\n");
            sb.Append("  UartMode: ").Append(UartMode).Append("\n");
            sb.Append("  UartSession: ").Append(UartSession).Append("\n");
            sb.Append("  UartSetup: ").Append(UartSetup).Append("\n");
            sb.Append("  UartTrigger: ").Append(UartTrigger).Append("\n");
            sb.Append("  ScheduleCron: ").Append(ScheduleCron).Append("\n");
            sb.Append("  ScheduleRequest: ").Append(ScheduleRequest).Append("\n");
            sb.Append("  ScheduleSetup: ").Append(ScheduleSetup).Append("\n");
            sb.Append("  ScheduleStatus: ").Append(ScheduleStatus).Append("\n");
            sb.Append("  MqttCertificate: ").Append(MqttCertificate).Append("\n");
            sb.Append("  MqttSession: ").Append(MqttSession).Append("\n");
            sb.Append("  MqttSetup: ").Append(MqttSetup).Append("\n");
            sb.Append("  MqttStatus: ").Append(MqttStatus).Append("\n");
            sb.Append("  NodeAddress: ").Append(NodeAddress).Append("\n");
            sb.Append("  NodeData: ").Append(NodeData).Append("\n");
            sb.Append("  NodeDetect: ").Append(NodeDetect).Append("\n");
            sb.Append("  NodeEnable: ").Append(NodeEnable).Append("\n");
            sb.Append("  NodeIdentify: ").Append(NodeIdentify).Append("\n");
            sb.Append("  NodeInformation: ").Append(NodeInformation).Append("\n");
            sb.Append("  NodeLatch: ").Append(NodeLatch).Append("\n");
            sb.Append("  NodePower: ").Append(NodePower).Append("\n");
            sb.Append("  NodeSetup: ").Append(NodeSetup).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UsageTracking);
        }

        /// <summary>
        /// Returns true if UsageTracking instances are equal
        /// </summary>
        /// <param name="input">Instance of UsageTracking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsageTracking input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UsageId == input.UsageId ||
                    (this.UsageId != null &&
                    this.UsageId.Equals(input.UsageId))
                ) && 
                (
                    this.OrganisationId == input.OrganisationId ||
                    (this.OrganisationId != null &&
                    this.OrganisationId.Equals(input.OrganisationId))
                ) && 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.DeviceId == input.DeviceId ||
                    (this.DeviceId != null &&
                    this.DeviceId.Equals(input.DeviceId))
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.Unknown == input.Unknown ||
                    this.Unknown.Equals(input.Unknown)
                ) && 
                (
                    this.DeviceActivity == input.DeviceActivity ||
                    this.DeviceActivity.Equals(input.DeviceActivity)
                ) && 
                (
                    this.DeviceBalance == input.DeviceBalance ||
                    this.DeviceBalance.Equals(input.DeviceBalance)
                ) && 
                (
                    this.DeviceBlink == input.DeviceBlink ||
                    this.DeviceBlink.Equals(input.DeviceBlink)
                ) && 
                (
                    this.DeviceBrightness == input.DeviceBrightness ||
                    this.DeviceBrightness.Equals(input.DeviceBrightness)
                ) && 
                (
                    this.DeviceBus == input.DeviceBus ||
                    this.DeviceBus.Equals(input.DeviceBus)
                ) && 
                (
                    this.DeviceClaim == input.DeviceClaim ||
                    this.DeviceClaim.Equals(input.DeviceClaim)
                ) && 
                (
                    this.DeviceCloud == input.DeviceCloud ||
                    this.DeviceCloud.Equals(input.DeviceCloud)
                ) && 
                (
                    this.DeviceColour == input.DeviceColour ||
                    this.DeviceColour.Equals(input.DeviceColour)
                ) && 
                (
                    this.DeviceFactory == input.DeviceFactory ||
                    this.DeviceFactory.Equals(input.DeviceFactory)
                ) && 
                (
                    this.DeviceInformation == input.DeviceInformation ||
                    this.DeviceInformation.Equals(input.DeviceInformation)
                ) && 
                (
                    this.DeviceKey == input.DeviceKey ||
                    this.DeviceKey.Equals(input.DeviceKey)
                ) && 
                (
                    this.DevicePoke == input.DevicePoke ||
                    this.DevicePoke.Equals(input.DevicePoke)
                ) && 
                (
                    this.DevicePower == input.DevicePower ||
                    this.DevicePower.Equals(input.DevicePower)
                ) && 
                (
                    this.DeviceSerial == input.DeviceSerial ||
                    this.DeviceSerial.Equals(input.DeviceSerial)
                ) && 
                (
                    this.DeviceSetup == input.DeviceSetup ||
                    this.DeviceSetup.Equals(input.DeviceSetup)
                ) && 
                (
                    this.DeviceSleep == input.DeviceSleep ||
                    this.DeviceSleep.Equals(input.DeviceSleep)
                ) && 
                (
                    this.DeviceTemperature == input.DeviceTemperature ||
                    this.DeviceTemperature.Equals(input.DeviceTemperature)
                ) && 
                (
                    this.DeviceTime == input.DeviceTime ||
                    this.DeviceTime.Equals(input.DeviceTime)
                ) && 
                (
                    this.DeviceUpdate == input.DeviceUpdate ||
                    this.DeviceUpdate.Equals(input.DeviceUpdate)
                ) && 
                (
                    this.DeviceUptime == input.DeviceUptime ||
                    this.DeviceUptime.Equals(input.DeviceUptime)
                ) && 
                (
                    this.DeviceVersion == input.DeviceVersion ||
                    this.DeviceVersion.Equals(input.DeviceVersion)
                ) && 
                (
                    this.NetworkTraffic == input.NetworkTraffic ||
                    this.NetworkTraffic.Equals(input.NetworkTraffic)
                ) && 
                (
                    this.NetworkInternet == input.NetworkInternet ||
                    this.NetworkInternet.Equals(input.NetworkInternet)
                ) && 
                (
                    this.NetworkIp == input.NetworkIp ||
                    this.NetworkIp.Equals(input.NetworkIp)
                ) && 
                (
                    this.NetworkMac == input.NetworkMac ||
                    this.NetworkMac.Equals(input.NetworkMac)
                ) && 
                (
                    this.I2cData == input.I2cData ||
                    this.I2cData.Equals(input.I2cData)
                ) && 
                (
                    this.I2cDetect == input.I2cDetect ||
                    this.I2cDetect.Equals(input.I2cDetect)
                ) && 
                (
                    this.I2cSetup == input.I2cSetup ||
                    this.I2cSetup.Equals(input.I2cSetup)
                ) && 
                (
                    this.GpioDirection == input.GpioDirection ||
                    this.GpioDirection.Equals(input.GpioDirection)
                ) && 
                (
                    this.GpioPulse == input.GpioPulse ||
                    this.GpioPulse.Equals(input.GpioPulse)
                ) && 
                (
                    this.GpioState == input.GpioState ||
                    this.GpioState.Equals(input.GpioState)
                ) && 
                (
                    this.GpioToggle == input.GpioToggle ||
                    this.GpioToggle.Equals(input.GpioToggle)
                ) && 
                (
                    this.TimerInterval == input.TimerInterval ||
                    this.TimerInterval.Equals(input.TimerInterval)
                ) && 
                (
                    this.TimerRequest == input.TimerRequest ||
                    this.TimerRequest.Equals(input.TimerRequest)
                ) && 
                (
                    this.TimerStatus == input.TimerStatus ||
                    this.TimerStatus.Equals(input.TimerStatus)
                ) && 
                (
                    this.WifiCredentials == input.WifiCredentials ||
                    this.WifiCredentials.Equals(input.WifiCredentials)
                ) && 
                (
                    this.WifiDetect == input.WifiDetect ||
                    this.WifiDetect.Equals(input.WifiDetect)
                ) && 
                (
                    this.WifiStatus == input.WifiStatus ||
                    this.WifiStatus.Equals(input.WifiStatus)
                ) && 
                (
                    this.UartData == input.UartData ||
                    this.UartData.Equals(input.UartData)
                ) && 
                (
                    this.UartMode == input.UartMode ||
                    this.UartMode.Equals(input.UartMode)
                ) && 
                (
                    this.UartSession == input.UartSession ||
                    this.UartSession.Equals(input.UartSession)
                ) && 
                (
                    this.UartSetup == input.UartSetup ||
                    this.UartSetup.Equals(input.UartSetup)
                ) && 
                (
                    this.UartTrigger == input.UartTrigger ||
                    this.UartTrigger.Equals(input.UartTrigger)
                ) && 
                (
                    this.ScheduleCron == input.ScheduleCron ||
                    this.ScheduleCron.Equals(input.ScheduleCron)
                ) && 
                (
                    this.ScheduleRequest == input.ScheduleRequest ||
                    this.ScheduleRequest.Equals(input.ScheduleRequest)
                ) && 
                (
                    this.ScheduleSetup == input.ScheduleSetup ||
                    this.ScheduleSetup.Equals(input.ScheduleSetup)
                ) && 
                (
                    this.ScheduleStatus == input.ScheduleStatus ||
                    this.ScheduleStatus.Equals(input.ScheduleStatus)
                ) && 
                (
                    this.MqttCertificate == input.MqttCertificate ||
                    this.MqttCertificate.Equals(input.MqttCertificate)
                ) && 
                (
                    this.MqttSession == input.MqttSession ||
                    this.MqttSession.Equals(input.MqttSession)
                ) && 
                (
                    this.MqttSetup == input.MqttSetup ||
                    this.MqttSetup.Equals(input.MqttSetup)
                ) && 
                (
                    this.MqttStatus == input.MqttStatus ||
                    this.MqttStatus.Equals(input.MqttStatus)
                ) && 
                (
                    this.NodeAddress == input.NodeAddress ||
                    this.NodeAddress.Equals(input.NodeAddress)
                ) && 
                (
                    this.NodeData == input.NodeData ||
                    this.NodeData.Equals(input.NodeData)
                ) && 
                (
                    this.NodeDetect == input.NodeDetect ||
                    this.NodeDetect.Equals(input.NodeDetect)
                ) && 
                (
                    this.NodeEnable == input.NodeEnable ||
                    this.NodeEnable.Equals(input.NodeEnable)
                ) && 
                (
                    this.NodeIdentify == input.NodeIdentify ||
                    this.NodeIdentify.Equals(input.NodeIdentify)
                ) && 
                (
                    this.NodeInformation == input.NodeInformation ||
                    this.NodeInformation.Equals(input.NodeInformation)
                ) && 
                (
                    this.NodeLatch == input.NodeLatch ||
                    this.NodeLatch.Equals(input.NodeLatch)
                ) && 
                (
                    this.NodePower == input.NodePower ||
                    this.NodePower.Equals(input.NodePower)
                ) && 
                (
                    this.NodeSetup == input.NodeSetup ||
                    this.NodeSetup.Equals(input.NodeSetup)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UsageId != null)
                {
                    hashCode = (hashCode * 59) + this.UsageId.GetHashCode();
                }
                if (this.OrganisationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrganisationId.GetHashCode();
                }
                if (this.Day != null)
                {
                    hashCode = (hashCode * 59) + this.Day.GetHashCode();
                }
                if (this.DeviceId != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Total.GetHashCode();
                hashCode = (hashCode * 59) + this.Unknown.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceActivity.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceBalance.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceBlink.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceBrightness.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceBus.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceClaim.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceCloud.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceColour.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceFactory.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceInformation.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceKey.GetHashCode();
                hashCode = (hashCode * 59) + this.DevicePoke.GetHashCode();
                hashCode = (hashCode * 59) + this.DevicePower.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceSerial.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceSetup.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceSleep.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceTemperature.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceTime.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceUpdate.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceUptime.GetHashCode();
                hashCode = (hashCode * 59) + this.DeviceVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.NetworkTraffic.GetHashCode();
                hashCode = (hashCode * 59) + this.NetworkInternet.GetHashCode();
                hashCode = (hashCode * 59) + this.NetworkIp.GetHashCode();
                hashCode = (hashCode * 59) + this.NetworkMac.GetHashCode();
                hashCode = (hashCode * 59) + this.I2cData.GetHashCode();
                hashCode = (hashCode * 59) + this.I2cDetect.GetHashCode();
                hashCode = (hashCode * 59) + this.I2cSetup.GetHashCode();
                hashCode = (hashCode * 59) + this.GpioDirection.GetHashCode();
                hashCode = (hashCode * 59) + this.GpioPulse.GetHashCode();
                hashCode = (hashCode * 59) + this.GpioState.GetHashCode();
                hashCode = (hashCode * 59) + this.GpioToggle.GetHashCode();
                hashCode = (hashCode * 59) + this.TimerInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.TimerRequest.GetHashCode();
                hashCode = (hashCode * 59) + this.TimerStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.WifiCredentials.GetHashCode();
                hashCode = (hashCode * 59) + this.WifiDetect.GetHashCode();
                hashCode = (hashCode * 59) + this.WifiStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.UartData.GetHashCode();
                hashCode = (hashCode * 59) + this.UartMode.GetHashCode();
                hashCode = (hashCode * 59) + this.UartSession.GetHashCode();
                hashCode = (hashCode * 59) + this.UartSetup.GetHashCode();
                hashCode = (hashCode * 59) + this.UartTrigger.GetHashCode();
                hashCode = (hashCode * 59) + this.ScheduleCron.GetHashCode();
                hashCode = (hashCode * 59) + this.ScheduleRequest.GetHashCode();
                hashCode = (hashCode * 59) + this.ScheduleSetup.GetHashCode();
                hashCode = (hashCode * 59) + this.ScheduleStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.MqttCertificate.GetHashCode();
                hashCode = (hashCode * 59) + this.MqttSession.GetHashCode();
                hashCode = (hashCode * 59) + this.MqttSetup.GetHashCode();
                hashCode = (hashCode * 59) + this.MqttStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.NodeAddress.GetHashCode();
                hashCode = (hashCode * 59) + this.NodeData.GetHashCode();
                hashCode = (hashCode * 59) + this.NodeDetect.GetHashCode();
                hashCode = (hashCode * 59) + this.NodeEnable.GetHashCode();
                hashCode = (hashCode * 59) + this.NodeIdentify.GetHashCode();
                hashCode = (hashCode * 59) + this.NodeInformation.GetHashCode();
                hashCode = (hashCode * 59) + this.NodeLatch.GetHashCode();
                hashCode = (hashCode * 59) + this.NodePower.GetHashCode();
                hashCode = (hashCode * 59) + this.NodeSetup.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
