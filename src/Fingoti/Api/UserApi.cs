/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Fingoti.Client;
using Fingoti.Model;

namespace Fingoti.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default DeleteUserTokensId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> DeleteUserTokensIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get your Fingoti user.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProfileResponse</returns>
        GetProfileResponse GetUser(int operationIndex = 0);

        /// <summary>
        /// Get your Fingoti user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProfileResponse</returns>
        ApiResponse<GetProfileResponse> GetUserWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get all organisations you are a member of.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PortalUserOrganisationsDto</returns>
        PortalUserOrganisationsDto GetUserOrganisations(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationName = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get all organisations you are a member of.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PortalUserOrganisationsDto</returns>
        ApiResponse<PortalUserOrganisationsDto> GetUserOrganisationsWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationName = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get all user sessions.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSessionsResponse</returns>
        UserSessionsResponse GetUserSessions(int? pageNumber = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get all user sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSessionsResponse</returns>
        ApiResponse<UserSessionsResponse> GetUserSessionsWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get all API tokens.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserTokenResponse</returns>
        UserTokenResponse GetUserTokens(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get all API tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserTokenResponse</returns>
        ApiResponse<UserTokenResponse> GetUserTokensWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get specified token.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserTokenResponse</returns>
        UserTokenResponse GetUserTokensId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get specified token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserTokenResponse</returns>
        ApiResponse<UserTokenResponse> GetUserTokensIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Update Fingoti user.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PatchUser(PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0);

        /// <summary>
        /// Update Fingoti user.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PatchUserWithHttpInfo(PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0);
        /// <summary>
        /// Update API token.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchUserTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PatchUserTokensId(Guid id, PatchUserTokenRequest? patchUserTokenRequest = default(PatchUserTokenRequest?), int operationIndex = 0);

        /// <summary>
        /// Update API token.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchUserTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PatchUserTokensIdWithHttpInfo(Guid id, PatchUserTokenRequest? patchUserTokenRequest = default(PatchUserTokenRequest?), int operationIndex = 0);
        /// <summary>
        /// Register a new Fingoti user.
        /// </summary>
        /// <remarks>
        /// The returned token is a Register token and is used to register a new Organisation
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DefaultWithToken</returns>
        DefaultWithToken PostUser(RegisterUserDto? registerUserDto = default(RegisterUserDto?), int operationIndex = 0);

        /// <summary>
        /// Register a new Fingoti user.
        /// </summary>
        /// <remarks>
        /// The returned token is a Register token and is used to register a new Organisation
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DefaultWithToken</returns>
        ApiResponse<DefaultWithToken> PostUserWithHttpInfo(RegisterUserDto? registerUserDto = default(RegisterUserDto?), int operationIndex = 0);
        /// <summary>
        /// Generate new API token.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUserTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenSuccessResponse</returns>
        TokenSuccessResponse PostUserTokens(NewUserTokenDto? newUserTokenDto = default(NewUserTokenDto?), int operationIndex = 0);

        /// <summary>
        /// Generate new API token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUserTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenSuccessResponse</returns>
        ApiResponse<TokenSuccessResponse> PostUserTokensWithHttpInfo(NewUserTokenDto? newUserTokenDto = default(NewUserTokenDto?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> DeleteUserTokensIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> DeleteUserTokensIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get your Fingoti user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProfileResponse</returns>
        System.Threading.Tasks.Task<GetProfileResponse> GetUserAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get your Fingoti user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProfileResponse>> GetUserWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all organisations you are a member of.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PortalUserOrganisationsDto</returns>
        System.Threading.Tasks.Task<PortalUserOrganisationsDto> GetUserOrganisationsAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all organisations you are a member of.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PortalUserOrganisationsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<PortalUserOrganisationsDto>> GetUserOrganisationsWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all user sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSessionsResponse</returns>
        System.Threading.Tasks.Task<UserSessionsResponse> GetUserSessionsAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all user sessions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSessionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSessionsResponse>> GetUserSessionsWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all API tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTokenResponse</returns>
        System.Threading.Tasks.Task<UserTokenResponse> GetUserTokensAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all API tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserTokenResponse>> GetUserTokensWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specified token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTokenResponse</returns>
        System.Threading.Tasks.Task<UserTokenResponse> GetUserTokensIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specified token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserTokenResponse>> GetUserTokensIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Fingoti user.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PatchUserAsync(PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Fingoti user.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PatchUserWithHttpInfoAsync(PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update API token.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchUserTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PatchUserTokensIdAsync(Guid id, PatchUserTokenRequest? patchUserTokenRequest = default(PatchUserTokenRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update API token.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchUserTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PatchUserTokensIdWithHttpInfoAsync(Guid id, PatchUserTokenRequest? patchUserTokenRequest = default(PatchUserTokenRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register a new Fingoti user.
        /// </summary>
        /// <remarks>
        /// The returned token is a Register token and is used to register a new Organisation
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DefaultWithToken</returns>
        System.Threading.Tasks.Task<DefaultWithToken> PostUserAsync(RegisterUserDto? registerUserDto = default(RegisterUserDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register a new Fingoti user.
        /// </summary>
        /// <remarks>
        /// The returned token is a Register token and is used to register a new Organisation
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DefaultWithToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<DefaultWithToken>> PostUserWithHttpInfoAsync(RegisterUserDto? registerUserDto = default(RegisterUserDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate new API token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUserTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenSuccessResponse</returns>
        System.Threading.Tasks.Task<TokenSuccessResponse> PostUserTokensAsync(NewUserTokenDto? newUserTokenDto = default(NewUserTokenDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate new API token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUserTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenSuccessResponse>> PostUserTokensWithHttpInfoAsync(NewUserTokenDto? newUserTokenDto = default(NewUserTokenDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private Fingoti.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(string basePath)
        {
            this.Configuration = Fingoti.Client.Configuration.MergeConfigurations(
                Fingoti.Client.GlobalConfiguration.Instance,
                new Fingoti.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Fingoti.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(Fingoti.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Fingoti.Client.Configuration.MergeConfigurations(
                Fingoti.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Fingoti.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserApi(Fingoti.Client.ISynchronousClient client, Fingoti.Client.IAsynchronousClient asyncClient, Fingoti.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Fingoti.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Fingoti.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Fingoti.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Fingoti.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Fingoti.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default DeleteUserTokensId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = DeleteUserTokensIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> DeleteUserTokensIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.DeleteUserTokensId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Default>("/v1/user/tokens/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserTokensId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> DeleteUserTokensIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await DeleteUserTokensIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> DeleteUserTokensIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.DeleteUserTokensId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Default>("/v1/user/tokens/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserTokensId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your Fingoti user. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetProfileResponse</returns>
        public GetProfileResponse GetUser(int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<GetProfileResponse> localVarResponse = GetUserWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your Fingoti user. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetProfileResponse</returns>
        public Fingoti.Client.ApiResponse<GetProfileResponse> GetUserWithHttpInfo(int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProfileResponse>("/v1/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your Fingoti user. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProfileResponse</returns>
        public async System.Threading.Tasks.Task<GetProfileResponse> GetUserAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<GetProfileResponse> localVarResponse = await GetUserWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your Fingoti user. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<GetProfileResponse>> GetUserWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UserApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProfileResponse>("/v1/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all organisations you are a member of. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PortalUserOrganisationsDto</returns>
        public PortalUserOrganisationsDto GetUserOrganisations(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationName = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<PortalUserOrganisationsDto> localVarResponse = GetUserOrganisationsWithHttpInfo(pageNumber, itemsPerPage, organisationName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all organisations you are a member of. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PortalUserOrganisationsDto</returns>
        public Fingoti.Client.ApiResponse<PortalUserOrganisationsDto> GetUserOrganisationsWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationName = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (organisationName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "organisationName", organisationName));
            }

            localVarRequestOptions.Operation = "UserApi.GetUserOrganisations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PortalUserOrganisationsDto>("/v1/user/organisations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserOrganisations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all organisations you are a member of. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PortalUserOrganisationsDto</returns>
        public async System.Threading.Tasks.Task<PortalUserOrganisationsDto> GetUserOrganisationsAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<PortalUserOrganisationsDto> localVarResponse = await GetUserOrganisationsWithHttpInfoAsync(pageNumber, itemsPerPage, organisationName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all organisations you are a member of. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PortalUserOrganisationsDto)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<PortalUserOrganisationsDto>> GetUserOrganisationsWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (organisationName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "organisationName", organisationName));
            }

            localVarRequestOptions.Operation = "UserApi.GetUserOrganisations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PortalUserOrganisationsDto>("/v1/user/organisations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserOrganisations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all user sessions. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserSessionsResponse</returns>
        public UserSessionsResponse GetUserSessions(int? pageNumber = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<UserSessionsResponse> localVarResponse = GetUserSessionsWithHttpInfo(pageNumber, itemsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user sessions. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserSessionsResponse</returns>
        public Fingoti.Client.ApiResponse<UserSessionsResponse> GetUserSessionsWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }

            localVarRequestOptions.Operation = "UserApi.GetUserSessions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserSessionsResponse>("/v1/user/sessions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all user sessions. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserSessionsResponse</returns>
        public async System.Threading.Tasks.Task<UserSessionsResponse> GetUserSessionsAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<UserSessionsResponse> localVarResponse = await GetUserSessionsWithHttpInfoAsync(pageNumber, itemsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all user sessions. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserSessionsResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<UserSessionsResponse>> GetUserSessionsWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }

            localVarRequestOptions.Operation = "UserApi.GetUserSessions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserSessionsResponse>("/v1/user/sessions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all API tokens. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserTokenResponse</returns>
        public UserTokenResponse GetUserTokens(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<UserTokenResponse> localVarResponse = GetUserTokensWithHttpInfo(pageNumber, itemsPerPage, tokenName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all API tokens. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserTokenResponse</returns>
        public Fingoti.Client.ApiResponse<UserTokenResponse> GetUserTokensWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (tokenName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "tokenName", tokenName));
            }

            localVarRequestOptions.Operation = "UserApi.GetUserTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserTokenResponse>("/v1/user/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all API tokens. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTokenResponse</returns>
        public async System.Threading.Tasks.Task<UserTokenResponse> GetUserTokensAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<UserTokenResponse> localVarResponse = await GetUserTokensWithHttpInfoAsync(pageNumber, itemsPerPage, tokenName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all API tokens. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<UserTokenResponse>> GetUserTokensWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (tokenName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "tokenName", tokenName));
            }

            localVarRequestOptions.Operation = "UserApi.GetUserTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserTokenResponse>("/v1/user/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserTokenResponse</returns>
        public UserTokenResponse GetUserTokensId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<UserTokenResponse> localVarResponse = GetUserTokensIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserTokenResponse</returns>
        public Fingoti.Client.ApiResponse<UserTokenResponse> GetUserTokensIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.GetUserTokensId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserTokenResponse>("/v1/user/tokens/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserTokensId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTokenResponse</returns>
        public async System.Threading.Tasks.Task<UserTokenResponse> GetUserTokensIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<UserTokenResponse> localVarResponse = await GetUserTokensIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<UserTokenResponse>> GetUserTokensIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UserApi.GetUserTokensId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserTokenResponse>("/v1/user/tokens/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserTokensId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Fingoti user. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PatchUser(PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PatchUserWithHttpInfo(patchUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Fingoti user. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PatchUserWithHttpInfo(PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = patchUserRequest;

            localVarRequestOptions.Operation = "UserApi.PatchUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Default>("/v1/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Fingoti user. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PatchUserAsync(PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PatchUserWithHttpInfoAsync(patchUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Fingoti user. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PatchUserWithHttpInfoAsync(PatchUserRequest? patchUserRequest = default(PatchUserRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = patchUserRequest;

            localVarRequestOptions.Operation = "UserApi.PatchUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Default>("/v1/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update API token. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchUserTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PatchUserTokensId(Guid id, PatchUserTokenRequest? patchUserTokenRequest = default(PatchUserTokenRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PatchUserTokensIdWithHttpInfo(id, patchUserTokenRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update API token. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchUserTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PatchUserTokensIdWithHttpInfo(Guid id, PatchUserTokenRequest? patchUserTokenRequest = default(PatchUserTokenRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchUserTokenRequest;

            localVarRequestOptions.Operation = "UserApi.PatchUserTokensId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Default>("/v1/user/tokens/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchUserTokensId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update API token. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchUserTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PatchUserTokensIdAsync(Guid id, PatchUserTokenRequest? patchUserTokenRequest = default(PatchUserTokenRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PatchUserTokensIdWithHttpInfoAsync(id, patchUserTokenRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update API token. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchUserTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PatchUserTokensIdWithHttpInfoAsync(Guid id, PatchUserTokenRequest? patchUserTokenRequest = default(PatchUserTokenRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchUserTokenRequest;

            localVarRequestOptions.Operation = "UserApi.PatchUserTokensId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Default>("/v1/user/tokens/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchUserTokensId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new Fingoti user. The returned token is a Register token and is used to register a new Organisation
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DefaultWithToken</returns>
        public DefaultWithToken PostUser(RegisterUserDto? registerUserDto = default(RegisterUserDto?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<DefaultWithToken> localVarResponse = PostUserWithHttpInfo(registerUserDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new Fingoti user. The returned token is a Register token and is used to register a new Organisation
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DefaultWithToken</returns>
        public Fingoti.Client.ApiResponse<DefaultWithToken> PostUserWithHttpInfo(RegisterUserDto? registerUserDto = default(RegisterUserDto?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerUserDto;

            localVarRequestOptions.Operation = "UserApi.PostUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DefaultWithToken>("/v1/user", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new Fingoti user. The returned token is a Register token and is used to register a new Organisation
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DefaultWithToken</returns>
        public async System.Threading.Tasks.Task<DefaultWithToken> PostUserAsync(RegisterUserDto? registerUserDto = default(RegisterUserDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<DefaultWithToken> localVarResponse = await PostUserWithHttpInfoAsync(registerUserDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new Fingoti user. The returned token is a Register token and is used to register a new Organisation
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="registerUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DefaultWithToken)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<DefaultWithToken>> PostUserWithHttpInfoAsync(RegisterUserDto? registerUserDto = default(RegisterUserDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = registerUserDto;

            localVarRequestOptions.Operation = "UserApi.PostUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DefaultWithToken>("/v1/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate new API token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUserTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenSuccessResponse</returns>
        public TokenSuccessResponse PostUserTokens(NewUserTokenDto? newUserTokenDto = default(NewUserTokenDto?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<TokenSuccessResponse> localVarResponse = PostUserTokensWithHttpInfo(newUserTokenDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate new API token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUserTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenSuccessResponse</returns>
        public Fingoti.Client.ApiResponse<TokenSuccessResponse> PostUserTokensWithHttpInfo(NewUserTokenDto? newUserTokenDto = default(NewUserTokenDto?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newUserTokenDto;

            localVarRequestOptions.Operation = "UserApi.PostUserTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TokenSuccessResponse>("/v1/user/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostUserTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate new API token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUserTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenSuccessResponse</returns>
        public async System.Threading.Tasks.Task<TokenSuccessResponse> PostUserTokensAsync(NewUserTokenDto? newUserTokenDto = default(NewUserTokenDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<TokenSuccessResponse> localVarResponse = await PostUserTokensWithHttpInfoAsync(newUserTokenDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate new API token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newUserTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<TokenSuccessResponse>> PostUserTokensWithHttpInfoAsync(NewUserTokenDto? newUserTokenDto = default(NewUserTokenDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newUserTokenDto;

            localVarRequestOptions.Operation = "UserApi.PostUserTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TokenSuccessResponse>("/v1/user/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostUserTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
