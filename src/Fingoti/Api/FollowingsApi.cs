/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Fingoti.Client;
using Fingoti.Model;

namespace Fingoti.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFollowingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a Pin Following. This is not recoverable.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default DeleteFollowingsId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete a Pin Following. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> DeleteFollowingsIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get all pin followings.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="followName"> (optional)</param>
        /// <param name="source"> (optional)</param>
        /// <param name="destination"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationFollowingResponse</returns>
        OrganisationFollowingResponse GetFollowings(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? followName = default(string?), string? source = default(string?), string? destination = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get all pin followings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="followName"> (optional)</param>
        /// <param name="source"> (optional)</param>
        /// <param name="destination"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationFollowingResponse</returns>
        ApiResponse<OrganisationFollowingResponse> GetFollowingsWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? followName = default(string?), string? source = default(string?), string? destination = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get specified pin following.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationFollowingResponse</returns>
        OrganisationFollowingResponse GetFollowingsId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get specified pin following.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationFollowingResponse</returns>
        ApiResponse<OrganisationFollowingResponse> GetFollowingsIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Update pin following.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchFollowRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PatchFollowingsId(Guid id, PatchFollowRequest? patchFollowRequest = default(PatchFollowRequest?), int operationIndex = 0);

        /// <summary>
        /// Update pin following.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchFollowRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PatchFollowingsIdWithHttpInfo(Guid id, PatchFollowRequest? patchFollowRequest = default(PatchFollowRequest?), int operationIndex = 0);
        /// <summary>
        /// Create a new pin following.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFollowDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DefaultWithId</returns>
        DefaultWithId PostFollowings(AddFollowDto? addFollowDto = default(AddFollowDto?), int operationIndex = 0);

        /// <summary>
        /// Create a new pin following.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFollowDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DefaultWithId</returns>
        ApiResponse<DefaultWithId> PostFollowingsWithHttpInfo(AddFollowDto? addFollowDto = default(AddFollowDto?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFollowingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a Pin Following. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> DeleteFollowingsIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Pin Following. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> DeleteFollowingsIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all pin followings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="followName"> (optional)</param>
        /// <param name="source"> (optional)</param>
        /// <param name="destination"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationFollowingResponse</returns>
        System.Threading.Tasks.Task<OrganisationFollowingResponse> GetFollowingsAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? followName = default(string?), string? source = default(string?), string? destination = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all pin followings.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="followName"> (optional)</param>
        /// <param name="source"> (optional)</param>
        /// <param name="destination"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationFollowingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationFollowingResponse>> GetFollowingsWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? followName = default(string?), string? source = default(string?), string? destination = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specified pin following.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationFollowingResponse</returns>
        System.Threading.Tasks.Task<OrganisationFollowingResponse> GetFollowingsIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specified pin following.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationFollowingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationFollowingResponse>> GetFollowingsIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update pin following.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchFollowRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PatchFollowingsIdAsync(Guid id, PatchFollowRequest? patchFollowRequest = default(PatchFollowRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update pin following.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchFollowRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PatchFollowingsIdWithHttpInfoAsync(Guid id, PatchFollowRequest? patchFollowRequest = default(PatchFollowRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new pin following.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFollowDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DefaultWithId</returns>
        System.Threading.Tasks.Task<DefaultWithId> PostFollowingsAsync(AddFollowDto? addFollowDto = default(AddFollowDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new pin following.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFollowDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DefaultWithId)</returns>
        System.Threading.Tasks.Task<ApiResponse<DefaultWithId>> PostFollowingsWithHttpInfoAsync(AddFollowDto? addFollowDto = default(AddFollowDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFollowingsApi : IFollowingsApiSync, IFollowingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FollowingsApi : IFollowingsApi
    {
        private Fingoti.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FollowingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FollowingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FollowingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FollowingsApi(string basePath)
        {
            this.Configuration = Fingoti.Client.Configuration.MergeConfigurations(
                Fingoti.Client.GlobalConfiguration.Instance,
                new Fingoti.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Fingoti.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FollowingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FollowingsApi(Fingoti.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Fingoti.Client.Configuration.MergeConfigurations(
                Fingoti.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Fingoti.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FollowingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FollowingsApi(Fingoti.Client.ISynchronousClient client, Fingoti.Client.IAsynchronousClient asyncClient, Fingoti.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Fingoti.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Fingoti.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Fingoti.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Fingoti.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Fingoti.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a Pin Following. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default DeleteFollowingsId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = DeleteFollowingsIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Pin Following. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> DeleteFollowingsIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "FollowingsApi.DeleteFollowingsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Default>("/v1/followings/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFollowingsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Pin Following. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> DeleteFollowingsIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await DeleteFollowingsIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Pin Following. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> DeleteFollowingsIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "FollowingsApi.DeleteFollowingsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Default>("/v1/followings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFollowingsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all pin followings. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="followName"> (optional)</param>
        /// <param name="source"> (optional)</param>
        /// <param name="destination"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationFollowingResponse</returns>
        public OrganisationFollowingResponse GetFollowings(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? followName = default(string?), string? source = default(string?), string? destination = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationFollowingResponse> localVarResponse = GetFollowingsWithHttpInfo(pageNumber, itemsPerPage, followName, source, destination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all pin followings. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="followName"> (optional)</param>
        /// <param name="source"> (optional)</param>
        /// <param name="destination"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationFollowingResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationFollowingResponse> GetFollowingsWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? followName = default(string?), string? source = default(string?), string? destination = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (followName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "followName", followName));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (destination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "destination", destination));
            }

            localVarRequestOptions.Operation = "FollowingsApi.GetFollowings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationFollowingResponse>("/v1/followings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFollowings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all pin followings. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="followName"> (optional)</param>
        /// <param name="source"> (optional)</param>
        /// <param name="destination"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationFollowingResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationFollowingResponse> GetFollowingsAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? followName = default(string?), string? source = default(string?), string? destination = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationFollowingResponse> localVarResponse = await GetFollowingsWithHttpInfoAsync(pageNumber, itemsPerPage, followName, source, destination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all pin followings. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="followName"> (optional)</param>
        /// <param name="source"> (optional)</param>
        /// <param name="destination"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationFollowingResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationFollowingResponse>> GetFollowingsWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? followName = default(string?), string? source = default(string?), string? destination = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (followName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "followName", followName));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (destination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "destination", destination));
            }

            localVarRequestOptions.Operation = "FollowingsApi.GetFollowings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationFollowingResponse>("/v1/followings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFollowings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified pin following. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationFollowingResponse</returns>
        public OrganisationFollowingResponse GetFollowingsId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationFollowingResponse> localVarResponse = GetFollowingsIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified pin following. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationFollowingResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationFollowingResponse> GetFollowingsIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "FollowingsApi.GetFollowingsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationFollowingResponse>("/v1/followings/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFollowingsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified pin following. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationFollowingResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationFollowingResponse> GetFollowingsIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationFollowingResponse> localVarResponse = await GetFollowingsIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified pin following. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationFollowingResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationFollowingResponse>> GetFollowingsIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "FollowingsApi.GetFollowingsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationFollowingResponse>("/v1/followings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFollowingsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update pin following. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchFollowRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PatchFollowingsId(Guid id, PatchFollowRequest? patchFollowRequest = default(PatchFollowRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PatchFollowingsIdWithHttpInfo(id, patchFollowRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update pin following. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchFollowRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PatchFollowingsIdWithHttpInfo(Guid id, PatchFollowRequest? patchFollowRequest = default(PatchFollowRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchFollowRequest;

            localVarRequestOptions.Operation = "FollowingsApi.PatchFollowingsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Default>("/v1/followings/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchFollowingsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update pin following. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchFollowRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PatchFollowingsIdAsync(Guid id, PatchFollowRequest? patchFollowRequest = default(PatchFollowRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PatchFollowingsIdWithHttpInfoAsync(id, patchFollowRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update pin following. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchFollowRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PatchFollowingsIdWithHttpInfoAsync(Guid id, PatchFollowRequest? patchFollowRequest = default(PatchFollowRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchFollowRequest;

            localVarRequestOptions.Operation = "FollowingsApi.PatchFollowingsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Default>("/v1/followings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchFollowingsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new pin following. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFollowDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DefaultWithId</returns>
        public DefaultWithId PostFollowings(AddFollowDto? addFollowDto = default(AddFollowDto?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<DefaultWithId> localVarResponse = PostFollowingsWithHttpInfo(addFollowDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new pin following. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFollowDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DefaultWithId</returns>
        public Fingoti.Client.ApiResponse<DefaultWithId> PostFollowingsWithHttpInfo(AddFollowDto? addFollowDto = default(AddFollowDto?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addFollowDto;

            localVarRequestOptions.Operation = "FollowingsApi.PostFollowings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DefaultWithId>("/v1/followings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFollowings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new pin following. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFollowDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DefaultWithId</returns>
        public async System.Threading.Tasks.Task<DefaultWithId> PostFollowingsAsync(AddFollowDto? addFollowDto = default(AddFollowDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<DefaultWithId> localVarResponse = await PostFollowingsWithHttpInfoAsync(addFollowDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new pin following. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addFollowDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DefaultWithId)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<DefaultWithId>> PostFollowingsWithHttpInfoAsync(AddFollowDto? addFollowDto = default(AddFollowDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addFollowDto;

            localVarRequestOptions.Operation = "FollowingsApi.PostFollowings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DefaultWithId>("/v1/followings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFollowings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
