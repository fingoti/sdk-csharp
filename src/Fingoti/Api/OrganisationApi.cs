/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Fingoti.Client;
using Fingoti.Model;

namespace Fingoti.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganisationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an address. This is not recoverable.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default DeleteOrganisationAddressesId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete an address. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> DeleteOrganisationAddressesIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Delete specified preset.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default DeleteOrganisationPresetsId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete specified preset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> DeleteOrganisationPresetsIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Delete a role. Role must not be assigned to any users. This is not recoverable.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default DeleteOrganisationRolesId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete a role. Role must not be assigned to any users. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> DeleteOrganisationRolesIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default DeleteOrganisationTokensId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> DeleteOrganisationTokensIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Remove a user from the organisation.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default DeleteOrganisationUsersId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Remove a user from the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> DeleteOrganisationUsersIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get your Fingoti organisaiton information.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationResponse</returns>
        OrganisationResponse GetOrganisation(int operationIndex = 0);

        /// <summary>
        /// Get your Fingoti organisaiton information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationResponse</returns>
        ApiResponse<OrganisationResponse> GetOrganisationWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get all addresses.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationAddressResponse</returns>
        OrganisationAddressResponse GetOrganisationAddresses(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? address = default(string?), string? postcode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get all addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationAddressResponse</returns>
        ApiResponse<OrganisationAddressResponse> GetOrganisationAddressesWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? address = default(string?), string? postcode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get specified address.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationAddressResponse</returns>
        OrganisationAddressResponse GetOrganisationAddressesId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get specified address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationAddressResponse</returns>
        ApiResponse<OrganisationAddressResponse> GetOrganisationAddressesIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get partner information.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationPartnerResponse</returns>
        OrganisationPartnerResponse GetOrganisationPartner(int operationIndex = 0);

        /// <summary>
        /// Get partner information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationPartnerResponse</returns>
        ApiResponse<OrganisationPartnerResponse> GetOrganisationPartnerWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get all presets.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="presetNumber"> (optional)</param>
        /// <param name="presetName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationPresetResponse</returns>
        OrganisationPresetResponse GetOrganisationPresets(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? presetNumber = default(string?), string? presetName = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get all presets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="presetNumber"> (optional)</param>
        /// <param name="presetName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationPresetResponse</returns>
        ApiResponse<OrganisationPresetResponse> GetOrganisationPresetsWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? presetNumber = default(string?), string? presetName = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get specified preset.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationPresetResponse</returns>
        OrganisationPresetResponse GetOrganisationPresetsId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get specified preset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationPresetResponse</returns>
        ApiResponse<OrganisationPresetResponse> GetOrganisationPresetsIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get all roles.
        /// </summary>
        /// <remarks>
        /// 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="roleName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationRoleResponse</returns>
        OrganisationRoleResponse GetOrganisationRoles(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? roleName = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get all roles.
        /// </summary>
        /// <remarks>
        /// 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="roleName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationRoleResponse</returns>
        ApiResponse<OrganisationRoleResponse> GetOrganisationRolesWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? roleName = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get specified role.
        /// </summary>
        /// <remarks>
        /// 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationRoleResponse</returns>
        OrganisationRoleResponse GetOrganisationRolesId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get specified role.
        /// </summary>
        /// <remarks>
        /// 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationRoleResponse</returns>
        ApiResponse<OrganisationRoleResponse> GetOrganisationRolesIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get all tenants.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationNumber"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationTenantsResponse</returns>
        OrganisationTenantsResponse GetOrganisationTenants(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationNumber = default(string?), string? organisationName = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get all tenants.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationNumber"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationTenantsResponse</returns>
        ApiResponse<OrganisationTenantsResponse> GetOrganisationTenantsWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationNumber = default(string?), string? organisationName = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get all API tokens.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserTokenResponse</returns>
        UserTokenResponse GetOrganisationTokens(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get all API tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserTokenResponse</returns>
        ApiResponse<UserTokenResponse> GetOrganisationTokensWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get specified token.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserTokenResponse</returns>
        UserTokenResponse GetOrganisationTokensId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get specified token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserTokenResponse</returns>
        ApiResponse<UserTokenResponse> GetOrganisationTokensIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Get all users.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationUserResponse</returns>
        OrganisationUserResponse GetOrganisationUsers(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? name = default(string?), string? email = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get all users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationUserResponse</returns>
        ApiResponse<OrganisationUserResponse> GetOrganisationUsersWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? name = default(string?), string? email = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get specidfied user.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationUserResponse</returns>
        OrganisationUserResponse GetOrganisationUsersId(Guid id, int operationIndex = 0);

        /// <summary>
        /// Get specidfied user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationUserResponse</returns>
        ApiResponse<OrganisationUserResponse> GetOrganisationUsersIdWithHttpInfo(Guid id, int operationIndex = 0);
        /// <summary>
        /// Update your Fingoti organisation.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchOrganisationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PatchOrganisation(PatchOrganisationRequest? patchOrganisationRequest = default(PatchOrganisationRequest?), int operationIndex = 0);

        /// <summary>
        /// Update your Fingoti organisation.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchOrganisationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PatchOrganisationWithHttpInfo(PatchOrganisationRequest? patchOrganisationRequest = default(PatchOrganisationRequest?), int operationIndex = 0);
        /// <summary>
        /// Update organisation address.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PatchOrganisationAddressesId(Guid id, PatchAddressRequest? patchAddressRequest = default(PatchAddressRequest?), int operationIndex = 0);

        /// <summary>
        /// Update organisation address.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PatchOrganisationAddressesIdWithHttpInfo(Guid id, PatchAddressRequest? patchAddressRequest = default(PatchAddressRequest?), int operationIndex = 0);
        /// <summary>
        /// Update organisation preset.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted.
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PatchOrganisationPresetsId(Guid id, PatchPresetRequest? patchPresetRequest = default(PatchPresetRequest?), int operationIndex = 0);

        /// <summary>
        /// Update organisation preset.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted.
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PatchOrganisationPresetsIdWithHttpInfo(Guid id, PatchPresetRequest? patchPresetRequest = default(PatchPresetRequest?), int operationIndex = 0);
        /// <summary>
        /// Update organisation role.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to update</param>
        /// <param name="patchRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PatchOrganisationRolesId(Guid id, PatchRoleRequest? patchRoleRequest = default(PatchRoleRequest?), int operationIndex = 0);

        /// <summary>
        /// Update organisation role.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to update</param>
        /// <param name="patchRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PatchOrganisationRolesIdWithHttpInfo(Guid id, PatchRoleRequest? patchRoleRequest = default(PatchRoleRequest?), int operationIndex = 0);
        /// <summary>
        /// Update API token.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted. AssignedUsers array must contain all users that are to be assigned to the token
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchOrganisationTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PatchOrganisationTokensId(Guid id, PatchOrganisationTokenRequest? patchOrganisationTokenRequest = default(PatchOrganisationTokenRequest?), int operationIndex = 0);

        /// <summary>
        /// Update API token.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted. AssignedUsers array must contain all users that are to be assigned to the token
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchOrganisationTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PatchOrganisationTokensIdWithHttpInfo(Guid id, PatchOrganisationTokenRequest? patchOrganisationTokenRequest = default(PatchOrganisationTokenRequest?), int operationIndex = 0);
        /// <summary>
        /// Update organisation user.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PatchOrganisationUsersId(Guid id, UpdateUserRole? updateUserRole = default(UpdateUserRole?), int operationIndex = 0);

        /// <summary>
        /// Update organisation user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PatchOrganisationUsersIdWithHttpInfo(Guid id, UpdateUserRole? updateUserRole = default(UpdateUserRole?), int operationIndex = 0);
        /// <summary>
        /// Register a new Fingoti organisation.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserOrganisationDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PostOrganisation(RegiserOrganisationDto? regiserOrganisationDto = default(RegiserOrganisationDto?), int operationIndex = 0);

        /// <summary>
        /// Register a new Fingoti organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserOrganisationDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PostOrganisationWithHttpInfo(RegiserOrganisationDto? regiserOrganisationDto = default(RegiserOrganisationDto?), int operationIndex = 0);
        /// <summary>
        /// Create a new address.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PostOrganisationAddresses(AddAddressRequest? addAddressRequest = default(AddAddressRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a new address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PostOrganisationAddressesWithHttpInfo(AddAddressRequest? addAddressRequest = default(AddAddressRequest?), int operationIndex = 0);
        /// <summary>
        /// Create a new preset.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddPresetResult</returns>
        AddPresetResult PostOrganisationPresets(AddPresetRequest? addPresetRequest = default(AddPresetRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a new preset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddPresetResult</returns>
        ApiResponse<AddPresetResult> PostOrganisationPresetsWithHttpInfo(AddPresetRequest? addPresetRequest = default(AddPresetRequest?), int operationIndex = 0);
        /// <summary>
        /// Create a new role.
        /// </summary>
        /// <remarks>
        /// 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DefaultWithId</returns>
        DefaultWithId PostOrganisationRoles(AddRoleRequest? addRoleRequest = default(AddRoleRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a new role.
        /// </summary>
        /// <remarks>
        /// 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DefaultWithId</returns>
        ApiResponse<DefaultWithId> PostOrganisationRolesWithHttpInfo(AddRoleRequest? addRoleRequest = default(AddRoleRequest?), int operationIndex = 0);
        /// <summary>
        /// Create new tenant. This is only available to partner organisations.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserTenantDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterOrganisationResult</returns>
        RegisterOrganisationResult PostOrganisationTenants(RegiserTenantDto? regiserTenantDto = default(RegiserTenantDto?), int operationIndex = 0);

        /// <summary>
        /// Create new tenant. This is only available to partner organisations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserTenantDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegisterOrganisationResult</returns>
        ApiResponse<RegisterOrganisationResult> PostOrganisationTenantsWithHttpInfo(RegiserTenantDto? regiserTenantDto = default(RegiserTenantDto?), int operationIndex = 0);
        /// <summary>
        /// Generate new API token.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrganisationTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenSuccessResponse</returns>
        TokenSuccessResponse PostOrganisationTokens(NewOrganisationTokenDto? newOrganisationTokenDto = default(NewOrganisationTokenDto?), int operationIndex = 0);

        /// <summary>
        /// Generate new API token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrganisationTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenSuccessResponse</returns>
        ApiResponse<TokenSuccessResponse> PostOrganisationTokensWithHttpInfo(NewOrganisationTokenDto? newOrganisationTokenDto = default(NewOrganisationTokenDto?), int operationIndex = 0);
        /// <summary>
        /// Invite a new user to the organisation.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PostOrganisationUsers(InviteUserDto? inviteUserDto = default(InviteUserDto?), int operationIndex = 0);

        /// <summary>
        /// Invite a new user to the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PostOrganisationUsersWithHttpInfo(InviteUserDto? inviteUserDto = default(InviteUserDto?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganisationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete an address. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> DeleteOrganisationAddressesIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an address. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> DeleteOrganisationAddressesIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete specified preset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> DeleteOrganisationPresetsIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete specified preset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> DeleteOrganisationPresetsIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a role. Role must not be assigned to any users. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> DeleteOrganisationRolesIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a role. Role must not be assigned to any users. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> DeleteOrganisationRolesIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> DeleteOrganisationTokensIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> DeleteOrganisationTokensIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a user from the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> DeleteOrganisationUsersIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a user from the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> DeleteOrganisationUsersIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get your Fingoti organisaiton information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationResponse</returns>
        System.Threading.Tasks.Task<OrganisationResponse> GetOrganisationAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get your Fingoti organisaiton information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationResponse>> GetOrganisationWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationAddressResponse</returns>
        System.Threading.Tasks.Task<OrganisationAddressResponse> GetOrganisationAddressesAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? address = default(string?), string? postcode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationAddressResponse>> GetOrganisationAddressesWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? address = default(string?), string? postcode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specified address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationAddressResponse</returns>
        System.Threading.Tasks.Task<OrganisationAddressResponse> GetOrganisationAddressesIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specified address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationAddressResponse>> GetOrganisationAddressesIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get partner information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationPartnerResponse</returns>
        System.Threading.Tasks.Task<OrganisationPartnerResponse> GetOrganisationPartnerAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get partner information.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationPartnerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationPartnerResponse>> GetOrganisationPartnerWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all presets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="presetNumber"> (optional)</param>
        /// <param name="presetName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationPresetResponse</returns>
        System.Threading.Tasks.Task<OrganisationPresetResponse> GetOrganisationPresetsAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? presetNumber = default(string?), string? presetName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all presets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="presetNumber"> (optional)</param>
        /// <param name="presetName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationPresetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationPresetResponse>> GetOrganisationPresetsWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? presetNumber = default(string?), string? presetName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specified preset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationPresetResponse</returns>
        System.Threading.Tasks.Task<OrganisationPresetResponse> GetOrganisationPresetsIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specified preset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationPresetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationPresetResponse>> GetOrganisationPresetsIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all roles.
        /// </summary>
        /// <remarks>
        /// 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="roleName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationRoleResponse</returns>
        System.Threading.Tasks.Task<OrganisationRoleResponse> GetOrganisationRolesAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? roleName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all roles.
        /// </summary>
        /// <remarks>
        /// 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="roleName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationRoleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationRoleResponse>> GetOrganisationRolesWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? roleName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specified role.
        /// </summary>
        /// <remarks>
        /// 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationRoleResponse</returns>
        System.Threading.Tasks.Task<OrganisationRoleResponse> GetOrganisationRolesIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specified role.
        /// </summary>
        /// <remarks>
        /// 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationRoleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationRoleResponse>> GetOrganisationRolesIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all tenants.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationNumber"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationTenantsResponse</returns>
        System.Threading.Tasks.Task<OrganisationTenantsResponse> GetOrganisationTenantsAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationNumber = default(string?), string? organisationName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all tenants.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationNumber"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationTenantsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationTenantsResponse>> GetOrganisationTenantsWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationNumber = default(string?), string? organisationName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all API tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTokenResponse</returns>
        System.Threading.Tasks.Task<UserTokenResponse> GetOrganisationTokensAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all API tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserTokenResponse>> GetOrganisationTokensWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specified token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTokenResponse</returns>
        System.Threading.Tasks.Task<UserTokenResponse> GetOrganisationTokensIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specified token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserTokenResponse>> GetOrganisationTokensIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationUserResponse</returns>
        System.Threading.Tasks.Task<OrganisationUserResponse> GetOrganisationUsersAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? name = default(string?), string? email = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationUserResponse>> GetOrganisationUsersWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? name = default(string?), string? email = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specidfied user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationUserResponse</returns>
        System.Threading.Tasks.Task<OrganisationUserResponse> GetOrganisationUsersIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specidfied user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganisationUserResponse>> GetOrganisationUsersIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update your Fingoti organisation.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchOrganisationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PatchOrganisationAsync(PatchOrganisationRequest? patchOrganisationRequest = default(PatchOrganisationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update your Fingoti organisation.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchOrganisationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PatchOrganisationWithHttpInfoAsync(PatchOrganisationRequest? patchOrganisationRequest = default(PatchOrganisationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update organisation address.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PatchOrganisationAddressesIdAsync(Guid id, PatchAddressRequest? patchAddressRequest = default(PatchAddressRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update organisation address.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PatchOrganisationAddressesIdWithHttpInfoAsync(Guid id, PatchAddressRequest? patchAddressRequest = default(PatchAddressRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update organisation preset.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted.
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PatchOrganisationPresetsIdAsync(Guid id, PatchPresetRequest? patchPresetRequest = default(PatchPresetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update organisation preset.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted.
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PatchOrganisationPresetsIdWithHttpInfoAsync(Guid id, PatchPresetRequest? patchPresetRequest = default(PatchPresetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update organisation role.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to update</param>
        /// <param name="patchRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PatchOrganisationRolesIdAsync(Guid id, PatchRoleRequest? patchRoleRequest = default(PatchRoleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update organisation role.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to update</param>
        /// <param name="patchRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PatchOrganisationRolesIdWithHttpInfoAsync(Guid id, PatchRoleRequest? patchRoleRequest = default(PatchRoleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update API token.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted. AssignedUsers array must contain all users that are to be assigned to the token
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchOrganisationTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PatchOrganisationTokensIdAsync(Guid id, PatchOrganisationTokenRequest? patchOrganisationTokenRequest = default(PatchOrganisationTokenRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update API token.
        /// </summary>
        /// <remarks>
        /// Fields that do not require updating can be omitted. AssignedUsers array must contain all users that are to be assigned to the token
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchOrganisationTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PatchOrganisationTokensIdWithHttpInfoAsync(Guid id, PatchOrganisationTokenRequest? patchOrganisationTokenRequest = default(PatchOrganisationTokenRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update organisation user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PatchOrganisationUsersIdAsync(Guid id, UpdateUserRole? updateUserRole = default(UpdateUserRole?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update organisation user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PatchOrganisationUsersIdWithHttpInfoAsync(Guid id, UpdateUserRole? updateUserRole = default(UpdateUserRole?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register a new Fingoti organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserOrganisationDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PostOrganisationAsync(RegiserOrganisationDto? regiserOrganisationDto = default(RegiserOrganisationDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register a new Fingoti organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserOrganisationDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PostOrganisationWithHttpInfoAsync(RegiserOrganisationDto? regiserOrganisationDto = default(RegiserOrganisationDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PostOrganisationAddressesAsync(AddAddressRequest? addAddressRequest = default(AddAddressRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PostOrganisationAddressesWithHttpInfoAsync(AddAddressRequest? addAddressRequest = default(AddAddressRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new preset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddPresetResult</returns>
        System.Threading.Tasks.Task<AddPresetResult> PostOrganisationPresetsAsync(AddPresetRequest? addPresetRequest = default(AddPresetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new preset.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddPresetResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddPresetResult>> PostOrganisationPresetsWithHttpInfoAsync(AddPresetRequest? addPresetRequest = default(AddPresetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new role.
        /// </summary>
        /// <remarks>
        /// 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DefaultWithId</returns>
        System.Threading.Tasks.Task<DefaultWithId> PostOrganisationRolesAsync(AddRoleRequest? addRoleRequest = default(AddRoleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new role.
        /// </summary>
        /// <remarks>
        /// 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DefaultWithId)</returns>
        System.Threading.Tasks.Task<ApiResponse<DefaultWithId>> PostOrganisationRolesWithHttpInfoAsync(AddRoleRequest? addRoleRequest = default(AddRoleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new tenant. This is only available to partner organisations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserTenantDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterOrganisationResult</returns>
        System.Threading.Tasks.Task<RegisterOrganisationResult> PostOrganisationTenantsAsync(RegiserTenantDto? regiserTenantDto = default(RegiserTenantDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new tenant. This is only available to partner organisations.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserTenantDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterOrganisationResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegisterOrganisationResult>> PostOrganisationTenantsWithHttpInfoAsync(RegiserTenantDto? regiserTenantDto = default(RegiserTenantDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate new API token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrganisationTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenSuccessResponse</returns>
        System.Threading.Tasks.Task<TokenSuccessResponse> PostOrganisationTokensAsync(NewOrganisationTokenDto? newOrganisationTokenDto = default(NewOrganisationTokenDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate new API token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrganisationTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenSuccessResponse>> PostOrganisationTokensWithHttpInfoAsync(NewOrganisationTokenDto? newOrganisationTokenDto = default(NewOrganisationTokenDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Invite a new user to the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PostOrganisationUsersAsync(InviteUserDto? inviteUserDto = default(InviteUserDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Invite a new user to the organisation.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PostOrganisationUsersWithHttpInfoAsync(InviteUserDto? inviteUserDto = default(InviteUserDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganisationApi : IOrganisationApiSync, IOrganisationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganisationApi : IOrganisationApi
    {
        private Fingoti.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganisationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganisationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganisationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganisationApi(string basePath)
        {
            this.Configuration = Fingoti.Client.Configuration.MergeConfigurations(
                Fingoti.Client.GlobalConfiguration.Instance,
                new Fingoti.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Fingoti.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganisationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganisationApi(Fingoti.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Fingoti.Client.Configuration.MergeConfigurations(
                Fingoti.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Fingoti.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganisationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrganisationApi(Fingoti.Client.ISynchronousClient client, Fingoti.Client.IAsynchronousClient asyncClient, Fingoti.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Fingoti.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Fingoti.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Fingoti.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Fingoti.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Fingoti.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete an address. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default DeleteOrganisationAddressesId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = DeleteOrganisationAddressesIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an address. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> DeleteOrganisationAddressesIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.DeleteOrganisationAddressesId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Default>("/v1/organisation/addresses/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganisationAddressesId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an address. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> DeleteOrganisationAddressesIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await DeleteOrganisationAddressesIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an address. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> DeleteOrganisationAddressesIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.DeleteOrganisationAddressesId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Default>("/v1/organisation/addresses/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganisationAddressesId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete specified preset. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default DeleteOrganisationPresetsId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = DeleteOrganisationPresetsIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete specified preset. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> DeleteOrganisationPresetsIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.DeleteOrganisationPresetsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Default>("/v1/organisation/presets/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganisationPresetsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete specified preset. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> DeleteOrganisationPresetsIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await DeleteOrganisationPresetsIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete specified preset. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> DeleteOrganisationPresetsIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.DeleteOrganisationPresetsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Default>("/v1/organisation/presets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganisationPresetsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a role. Role must not be assigned to any users. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default DeleteOrganisationRolesId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = DeleteOrganisationRolesIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a role. Role must not be assigned to any users. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> DeleteOrganisationRolesIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.DeleteOrganisationRolesId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Default>("/v1/organisation/roles/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganisationRolesId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a role. Role must not be assigned to any users. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> DeleteOrganisationRolesIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await DeleteOrganisationRolesIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a role. Role must not be assigned to any users. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> DeleteOrganisationRolesIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.DeleteOrganisationRolesId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Default>("/v1/organisation/roles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganisationRolesId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default DeleteOrganisationTokensId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = DeleteOrganisationTokensIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> DeleteOrganisationTokensIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.DeleteOrganisationTokensId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Default>("/v1/organisation/tokens/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganisationTokensId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> DeleteOrganisationTokensIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await DeleteOrganisationTokensIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Token. Token will no longer authenticate API requests. This is not recoverable. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> DeleteOrganisationTokensIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.DeleteOrganisationTokensId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Default>("/v1/organisation/tokens/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganisationTokensId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a user from the organisation. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default DeleteOrganisationUsersId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = DeleteOrganisationUsersIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a user from the organisation. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> DeleteOrganisationUsersIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.DeleteOrganisationUsersId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Default>("/v1/organisation/users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganisationUsersId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a user from the organisation. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> DeleteOrganisationUsersIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await DeleteOrganisationUsersIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a user from the organisation. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> DeleteOrganisationUsersIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.DeleteOrganisationUsersId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Default>("/v1/organisation/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrganisationUsersId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your Fingoti organisaiton information. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationResponse</returns>
        public OrganisationResponse GetOrganisation(int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationResponse> localVarResponse = GetOrganisationWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your Fingoti organisaiton information. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationResponse> GetOrganisationWithHttpInfo(int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationResponse>("/v1/organisation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get your Fingoti organisaiton information. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationResponse> GetOrganisationAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationResponse> localVarResponse = await GetOrganisationWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get your Fingoti organisaiton information. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationResponse>> GetOrganisationWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationResponse>("/v1/organisation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all addresses. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationAddressResponse</returns>
        public OrganisationAddressResponse GetOrganisationAddresses(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? address = default(string?), string? postcode = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationAddressResponse> localVarResponse = GetOrganisationAddressesWithHttpInfo(pageNumber, itemsPerPage, address, postcode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all addresses. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationAddressResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationAddressResponse> GetOrganisationAddressesWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? address = default(string?), string? postcode = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (postcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "postcode", postcode));
            }

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationAddressResponse>("/v1/organisation/addresses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all addresses. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationAddressResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationAddressResponse> GetOrganisationAddressesAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? address = default(string?), string? postcode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationAddressResponse> localVarResponse = await GetOrganisationAddressesWithHttpInfoAsync(pageNumber, itemsPerPage, address, postcode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all addresses. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="address"> (optional)</param>
        /// <param name="postcode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationAddressResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationAddressResponse>> GetOrganisationAddressesWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? address = default(string?), string? postcode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (address != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "address", address));
            }
            if (postcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "postcode", postcode));
            }

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationAddressResponse>("/v1/organisation/addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified address. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationAddressResponse</returns>
        public OrganisationAddressResponse GetOrganisationAddressesId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationAddressResponse> localVarResponse = GetOrganisationAddressesIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified address. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationAddressResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationAddressResponse> GetOrganisationAddressesIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationAddressesId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationAddressResponse>("/v1/organisation/addresses/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationAddressesId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified address. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationAddressResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationAddressResponse> GetOrganisationAddressesIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationAddressResponse> localVarResponse = await GetOrganisationAddressesIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified address. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationAddressResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationAddressResponse>> GetOrganisationAddressesIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationAddressesId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationAddressResponse>("/v1/organisation/addresses/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationAddressesId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get partner information. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationPartnerResponse</returns>
        public OrganisationPartnerResponse GetOrganisationPartner(int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationPartnerResponse> localVarResponse = GetOrganisationPartnerWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get partner information. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationPartnerResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationPartnerResponse> GetOrganisationPartnerWithHttpInfo(int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationPartner";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationPartnerResponse>("/v1/organisation/partner", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationPartner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get partner information. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationPartnerResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationPartnerResponse> GetOrganisationPartnerAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationPartnerResponse> localVarResponse = await GetOrganisationPartnerWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get partner information. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationPartnerResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationPartnerResponse>> GetOrganisationPartnerWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationPartner";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationPartnerResponse>("/v1/organisation/partner", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationPartner", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all presets. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="presetNumber"> (optional)</param>
        /// <param name="presetName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationPresetResponse</returns>
        public OrganisationPresetResponse GetOrganisationPresets(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? presetNumber = default(string?), string? presetName = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationPresetResponse> localVarResponse = GetOrganisationPresetsWithHttpInfo(pageNumber, itemsPerPage, presetNumber, presetName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all presets. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="presetNumber"> (optional)</param>
        /// <param name="presetName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationPresetResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationPresetResponse> GetOrganisationPresetsWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? presetNumber = default(string?), string? presetName = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (presetNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "presetNumber", presetNumber));
            }
            if (presetName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "presetName", presetName));
            }

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationPresets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationPresetResponse>("/v1/organisation/presets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationPresets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all presets. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="presetNumber"> (optional)</param>
        /// <param name="presetName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationPresetResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationPresetResponse> GetOrganisationPresetsAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? presetNumber = default(string?), string? presetName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationPresetResponse> localVarResponse = await GetOrganisationPresetsWithHttpInfoAsync(pageNumber, itemsPerPage, presetNumber, presetName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all presets. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="presetNumber"> (optional)</param>
        /// <param name="presetName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationPresetResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationPresetResponse>> GetOrganisationPresetsWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? presetNumber = default(string?), string? presetName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (presetNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "presetNumber", presetNumber));
            }
            if (presetName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "presetName", presetName));
            }

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationPresets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationPresetResponse>("/v1/organisation/presets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationPresets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified preset. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationPresetResponse</returns>
        public OrganisationPresetResponse GetOrganisationPresetsId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationPresetResponse> localVarResponse = GetOrganisationPresetsIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified preset. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationPresetResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationPresetResponse> GetOrganisationPresetsIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationPresetsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationPresetResponse>("/v1/organisation/presets/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationPresetsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified preset. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationPresetResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationPresetResponse> GetOrganisationPresetsIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationPresetResponse> localVarResponse = await GetOrganisationPresetsIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified preset. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationPresetResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationPresetResponse>> GetOrganisationPresetsIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationPresetsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationPresetResponse>("/v1/organisation/presets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationPresetsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all roles. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="roleName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationRoleResponse</returns>
        public OrganisationRoleResponse GetOrganisationRoles(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? roleName = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationRoleResponse> localVarResponse = GetOrganisationRolesWithHttpInfo(pageNumber, itemsPerPage, roleName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="roleName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationRoleResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationRoleResponse> GetOrganisationRolesWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? roleName = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (roleName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "roleName", roleName));
            }

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationRoleResponse>("/v1/organisation/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all roles. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="roleName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationRoleResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationRoleResponse> GetOrganisationRolesAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? roleName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationRoleResponse> localVarResponse = await GetOrganisationRolesWithHttpInfoAsync(pageNumber, itemsPerPage, roleName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all roles. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="roleName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationRoleResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationRoleResponse>> GetOrganisationRolesWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? roleName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (roleName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "roleName", roleName));
            }

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationRoleResponse>("/v1/organisation/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified role. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationRoleResponse</returns>
        public OrganisationRoleResponse GetOrganisationRolesId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationRoleResponse> localVarResponse = GetOrganisationRolesIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified role. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationRoleResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationRoleResponse> GetOrganisationRolesIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationRolesId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationRoleResponse>("/v1/organisation/roles/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationRolesId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified role. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationRoleResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationRoleResponse> GetOrganisationRolesIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationRoleResponse> localVarResponse = await GetOrganisationRolesIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified role. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationRoleResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationRoleResponse>> GetOrganisationRolesIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationRolesId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationRoleResponse>("/v1/organisation/roles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationRolesId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all tenants. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationNumber"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationTenantsResponse</returns>
        public OrganisationTenantsResponse GetOrganisationTenants(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationNumber = default(string?), string? organisationName = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationTenantsResponse> localVarResponse = GetOrganisationTenantsWithHttpInfo(pageNumber, itemsPerPage, organisationNumber, organisationName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all tenants. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationNumber"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationTenantsResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationTenantsResponse> GetOrganisationTenantsWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationNumber = default(string?), string? organisationName = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (organisationNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "organisationNumber", organisationNumber));
            }
            if (organisationName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "organisationName", organisationName));
            }

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationTenants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationTenantsResponse>("/v1/organisation/tenants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationTenants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all tenants. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationNumber"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationTenantsResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationTenantsResponse> GetOrganisationTenantsAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationNumber = default(string?), string? organisationName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationTenantsResponse> localVarResponse = await GetOrganisationTenantsWithHttpInfoAsync(pageNumber, itemsPerPage, organisationNumber, organisationName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all tenants. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="organisationNumber"> (optional)</param>
        /// <param name="organisationName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationTenantsResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationTenantsResponse>> GetOrganisationTenantsWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? organisationNumber = default(string?), string? organisationName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (organisationNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "organisationNumber", organisationNumber));
            }
            if (organisationName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "organisationName", organisationName));
            }

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationTenants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationTenantsResponse>("/v1/organisation/tenants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationTenants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all API tokens. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserTokenResponse</returns>
        public UserTokenResponse GetOrganisationTokens(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<UserTokenResponse> localVarResponse = GetOrganisationTokensWithHttpInfo(pageNumber, itemsPerPage, tokenName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all API tokens. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserTokenResponse</returns>
        public Fingoti.Client.ApiResponse<UserTokenResponse> GetOrganisationTokensWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (tokenName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "tokenName", tokenName));
            }

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserTokenResponse>("/v1/organisation/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all API tokens. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTokenResponse</returns>
        public async System.Threading.Tasks.Task<UserTokenResponse> GetOrganisationTokensAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<UserTokenResponse> localVarResponse = await GetOrganisationTokensWithHttpInfoAsync(pageNumber, itemsPerPage, tokenName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all API tokens. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="tokenName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<UserTokenResponse>> GetOrganisationTokensWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? tokenName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (tokenName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "tokenName", tokenName));
            }

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserTokenResponse>("/v1/organisation/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserTokenResponse</returns>
        public UserTokenResponse GetOrganisationTokensId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<UserTokenResponse> localVarResponse = GetOrganisationTokensIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserTokenResponse</returns>
        public Fingoti.Client.ApiResponse<UserTokenResponse> GetOrganisationTokensIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationTokensId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserTokenResponse>("/v1/organisation/tokens/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationTokensId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTokenResponse</returns>
        public async System.Threading.Tasks.Task<UserTokenResponse> GetOrganisationTokensIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<UserTokenResponse> localVarResponse = await GetOrganisationTokensIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<UserTokenResponse>> GetOrganisationTokensIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationTokensId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserTokenResponse>("/v1/organisation/tokens/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationTokensId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all users. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationUserResponse</returns>
        public OrganisationUserResponse GetOrganisationUsers(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? name = default(string?), string? email = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationUserResponse> localVarResponse = GetOrganisationUsersWithHttpInfo(pageNumber, itemsPerPage, name, email);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all users. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationUserResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationUserResponse> GetOrganisationUsersWithHttpInfo(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? name = default(string?), string? email = default(string?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationUserResponse>("/v1/organisation/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all users. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationUserResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationUserResponse> GetOrganisationUsersAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? name = default(string?), string? email = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationUserResponse> localVarResponse = await GetOrganisationUsersWithHttpInfoAsync(pageNumber, itemsPerPage, name, email, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all users. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageNumber"> (optional)</param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <param name="email"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationUserResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationUserResponse>> GetOrganisationUsersWithHttpInfoAsync(int? pageNumber = default(int?), int? itemsPerPage = default(int?), string? name = default(string?), string? email = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "ItemsPerPage", itemsPerPage));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationUserResponse>("/v1/organisation/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specidfied user. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrganisationUserResponse</returns>
        public OrganisationUserResponse GetOrganisationUsersId(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<OrganisationUserResponse> localVarResponse = GetOrganisationUsersIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specidfied user. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrganisationUserResponse</returns>
        public Fingoti.Client.ApiResponse<OrganisationUserResponse> GetOrganisationUsersIdWithHttpInfo(Guid id, int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationUsersId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OrganisationUserResponse>("/v1/organisation/users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationUsersId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specidfied user. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrganisationUserResponse</returns>
        public async System.Threading.Tasks.Task<OrganisationUserResponse> GetOrganisationUsersIdAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<OrganisationUserResponse> localVarResponse = await GetOrganisationUsersIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specidfied user. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrganisationUserResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<OrganisationUserResponse>> GetOrganisationUsersIdWithHttpInfoAsync(Guid id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OrganisationApi.GetOrganisationUsersId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrganisationUserResponse>("/v1/organisation/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrganisationUsersId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update your Fingoti organisation. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchOrganisationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PatchOrganisation(PatchOrganisationRequest? patchOrganisationRequest = default(PatchOrganisationRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PatchOrganisationWithHttpInfo(patchOrganisationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update your Fingoti organisation. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchOrganisationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PatchOrganisationWithHttpInfo(PatchOrganisationRequest? patchOrganisationRequest = default(PatchOrganisationRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = patchOrganisationRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PatchOrganisation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Default>("/v1/organisation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrganisation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update your Fingoti organisation. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchOrganisationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PatchOrganisationAsync(PatchOrganisationRequest? patchOrganisationRequest = default(PatchOrganisationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PatchOrganisationWithHttpInfoAsync(patchOrganisationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update your Fingoti organisation. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchOrganisationRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PatchOrganisationWithHttpInfoAsync(PatchOrganisationRequest? patchOrganisationRequest = default(PatchOrganisationRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = patchOrganisationRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PatchOrganisation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Default>("/v1/organisation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrganisation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update organisation address. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PatchOrganisationAddressesId(Guid id, PatchAddressRequest? patchAddressRequest = default(PatchAddressRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PatchOrganisationAddressesIdWithHttpInfo(id, patchAddressRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update organisation address. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PatchOrganisationAddressesIdWithHttpInfo(Guid id, PatchAddressRequest? patchAddressRequest = default(PatchAddressRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchAddressRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PatchOrganisationAddressesId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Default>("/v1/organisation/addresses/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrganisationAddressesId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update organisation address. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PatchOrganisationAddressesIdAsync(Guid id, PatchAddressRequest? patchAddressRequest = default(PatchAddressRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PatchOrganisationAddressesIdWithHttpInfoAsync(id, patchAddressRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update organisation address. Fields that do not require updating can be omitted
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PatchOrganisationAddressesIdWithHttpInfoAsync(Guid id, PatchAddressRequest? patchAddressRequest = default(PatchAddressRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchAddressRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PatchOrganisationAddressesId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Default>("/v1/organisation/addresses/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrganisationAddressesId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update organisation preset. Fields that do not require updating can be omitted.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PatchOrganisationPresetsId(Guid id, PatchPresetRequest? patchPresetRequest = default(PatchPresetRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PatchOrganisationPresetsIdWithHttpInfo(id, patchPresetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update organisation preset. Fields that do not require updating can be omitted.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PatchOrganisationPresetsIdWithHttpInfo(Guid id, PatchPresetRequest? patchPresetRequest = default(PatchPresetRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchPresetRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PatchOrganisationPresetsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Default>("/v1/organisation/presets/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrganisationPresetsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update organisation preset. Fields that do not require updating can be omitted.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PatchOrganisationPresetsIdAsync(Guid id, PatchPresetRequest? patchPresetRequest = default(PatchPresetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PatchOrganisationPresetsIdWithHttpInfoAsync(id, patchPresetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update organisation preset. Fields that do not require updating can be omitted.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PatchOrganisationPresetsIdWithHttpInfoAsync(Guid id, PatchPresetRequest? patchPresetRequest = default(PatchPresetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchPresetRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PatchOrganisationPresetsId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Default>("/v1/organisation/presets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrganisationPresetsId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update organisation role. Fields that do not require updating can be omitted. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to update</param>
        /// <param name="patchRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PatchOrganisationRolesId(Guid id, PatchRoleRequest? patchRoleRequest = default(PatchRoleRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PatchOrganisationRolesIdWithHttpInfo(id, patchRoleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update organisation role. Fields that do not require updating can be omitted. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to update</param>
        /// <param name="patchRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PatchOrganisationRolesIdWithHttpInfo(Guid id, PatchRoleRequest? patchRoleRequest = default(PatchRoleRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchRoleRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PatchOrganisationRolesId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Default>("/v1/organisation/roles/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrganisationRolesId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update organisation role. Fields that do not require updating can be omitted. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to update</param>
        /// <param name="patchRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PatchOrganisationRolesIdAsync(Guid id, PatchRoleRequest? patchRoleRequest = default(PatchRoleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PatchOrganisationRolesIdWithHttpInfoAsync(id, patchRoleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update organisation role. Fields that do not require updating can be omitted. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Role ID to update</param>
        /// <param name="patchRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PatchOrganisationRolesIdWithHttpInfoAsync(Guid id, PatchRoleRequest? patchRoleRequest = default(PatchRoleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchRoleRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PatchOrganisationRolesId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Default>("/v1/organisation/roles/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrganisationRolesId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update API token. Fields that do not require updating can be omitted. AssignedUsers array must contain all users that are to be assigned to the token
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchOrganisationTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PatchOrganisationTokensId(Guid id, PatchOrganisationTokenRequest? patchOrganisationTokenRequest = default(PatchOrganisationTokenRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PatchOrganisationTokensIdWithHttpInfo(id, patchOrganisationTokenRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update API token. Fields that do not require updating can be omitted. AssignedUsers array must contain all users that are to be assigned to the token
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchOrganisationTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PatchOrganisationTokensIdWithHttpInfo(Guid id, PatchOrganisationTokenRequest? patchOrganisationTokenRequest = default(PatchOrganisationTokenRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchOrganisationTokenRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PatchOrganisationTokensId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Default>("/v1/organisation/tokens/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrganisationTokensId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update API token. Fields that do not require updating can be omitted. AssignedUsers array must contain all users that are to be assigned to the token
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchOrganisationTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PatchOrganisationTokensIdAsync(Guid id, PatchOrganisationTokenRequest? patchOrganisationTokenRequest = default(PatchOrganisationTokenRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PatchOrganisationTokensIdWithHttpInfoAsync(id, patchOrganisationTokenRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update API token. Fields that do not require updating can be omitted. AssignedUsers array must contain all users that are to be assigned to the token
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchOrganisationTokenRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PatchOrganisationTokensIdWithHttpInfoAsync(Guid id, PatchOrganisationTokenRequest? patchOrganisationTokenRequest = default(PatchOrganisationTokenRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchOrganisationTokenRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PatchOrganisationTokensId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Default>("/v1/organisation/tokens/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrganisationTokensId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update organisation user. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PatchOrganisationUsersId(Guid id, UpdateUserRole? updateUserRole = default(UpdateUserRole?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PatchOrganisationUsersIdWithHttpInfo(id, updateUserRole);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update organisation user. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PatchOrganisationUsersIdWithHttpInfo(Guid id, UpdateUserRole? updateUserRole = default(UpdateUserRole?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateUserRole;

            localVarRequestOptions.Operation = "OrganisationApi.PatchOrganisationUsersId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Default>("/v1/organisation/users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrganisationUsersId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update organisation user. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PatchOrganisationUsersIdAsync(Guid id, UpdateUserRole? updateUserRole = default(UpdateUserRole?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PatchOrganisationUsersIdWithHttpInfoAsync(id, updateUserRole, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update organisation user. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRole"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PatchOrganisationUsersIdWithHttpInfoAsync(Guid id, UpdateUserRole? updateUserRole = default(UpdateUserRole?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateUserRole;

            localVarRequestOptions.Operation = "OrganisationApi.PatchOrganisationUsersId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Default>("/v1/organisation/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrganisationUsersId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new Fingoti organisation. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserOrganisationDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PostOrganisation(RegiserOrganisationDto? regiserOrganisationDto = default(RegiserOrganisationDto?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PostOrganisationWithHttpInfo(regiserOrganisationDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new Fingoti organisation. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserOrganisationDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PostOrganisationWithHttpInfo(RegiserOrganisationDto? regiserOrganisationDto = default(RegiserOrganisationDto?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = regiserOrganisationDto;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Default>("/v1/organisation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register a new Fingoti organisation. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserOrganisationDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PostOrganisationAsync(RegiserOrganisationDto? regiserOrganisationDto = default(RegiserOrganisationDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PostOrganisationWithHttpInfoAsync(regiserOrganisationDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Register a new Fingoti organisation. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserOrganisationDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PostOrganisationWithHttpInfoAsync(RegiserOrganisationDto? regiserOrganisationDto = default(RegiserOrganisationDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = regiserOrganisationDto;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Default>("/v1/organisation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new address. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PostOrganisationAddresses(AddAddressRequest? addAddressRequest = default(AddAddressRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PostOrganisationAddressesWithHttpInfo(addAddressRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new address. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PostOrganisationAddressesWithHttpInfo(AddAddressRequest? addAddressRequest = default(AddAddressRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addAddressRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisationAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Default>("/v1/organisation/addresses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisationAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new address. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PostOrganisationAddressesAsync(AddAddressRequest? addAddressRequest = default(AddAddressRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PostOrganisationAddressesWithHttpInfoAsync(addAddressRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new address. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAddressRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PostOrganisationAddressesWithHttpInfoAsync(AddAddressRequest? addAddressRequest = default(AddAddressRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addAddressRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisationAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Default>("/v1/organisation/addresses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisationAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new preset. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddPresetResult</returns>
        public AddPresetResult PostOrganisationPresets(AddPresetRequest? addPresetRequest = default(AddPresetRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<AddPresetResult> localVarResponse = PostOrganisationPresetsWithHttpInfo(addPresetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new preset. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddPresetResult</returns>
        public Fingoti.Client.ApiResponse<AddPresetResult> PostOrganisationPresetsWithHttpInfo(AddPresetRequest? addPresetRequest = default(AddPresetRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addPresetRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisationPresets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddPresetResult>("/v1/organisation/presets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisationPresets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new preset. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddPresetResult</returns>
        public async System.Threading.Tasks.Task<AddPresetResult> PostOrganisationPresetsAsync(AddPresetRequest? addPresetRequest = default(AddPresetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<AddPresetResult> localVarResponse = await PostOrganisationPresetsWithHttpInfoAsync(addPresetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new preset. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addPresetRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddPresetResult)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<AddPresetResult>> PostOrganisationPresetsWithHttpInfoAsync(AddPresetRequest? addPresetRequest = default(AddPresetRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addPresetRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisationPresets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddPresetResult>("/v1/organisation/presets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisationPresets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new role. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DefaultWithId</returns>
        public DefaultWithId PostOrganisationRoles(AddRoleRequest? addRoleRequest = default(AddRoleRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<DefaultWithId> localVarResponse = PostOrganisationRolesWithHttpInfo(addRoleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new role. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DefaultWithId</returns>
        public Fingoti.Client.ApiResponse<DefaultWithId> PostOrganisationRolesWithHttpInfo(AddRoleRequest? addRoleRequest = default(AddRoleRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addRoleRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisationRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DefaultWithId>("/v1/organisation/roles", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisationRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new role. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DefaultWithId</returns>
        public async System.Threading.Tasks.Task<DefaultWithId> PostOrganisationRolesAsync(AddRoleRequest? addRoleRequest = default(AddRoleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<DefaultWithId> localVarResponse = await PostOrganisationRolesWithHttpInfoAsync(addRoleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new role. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addRoleRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DefaultWithId)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<DefaultWithId>> PostOrganisationRolesWithHttpInfoAsync(AddRoleRequest? addRoleRequest = default(AddRoleRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addRoleRequest;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisationRoles";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DefaultWithId>("/v1/organisation/roles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisationRoles", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new tenant. This is only available to partner organisations. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserTenantDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RegisterOrganisationResult</returns>
        public RegisterOrganisationResult PostOrganisationTenants(RegiserTenantDto? regiserTenantDto = default(RegiserTenantDto?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<RegisterOrganisationResult> localVarResponse = PostOrganisationTenantsWithHttpInfo(regiserTenantDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new tenant. This is only available to partner organisations. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserTenantDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RegisterOrganisationResult</returns>
        public Fingoti.Client.ApiResponse<RegisterOrganisationResult> PostOrganisationTenantsWithHttpInfo(RegiserTenantDto? regiserTenantDto = default(RegiserTenantDto?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = regiserTenantDto;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisationTenants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RegisterOrganisationResult>("/v1/organisation/tenants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisationTenants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new tenant. This is only available to partner organisations. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserTenantDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegisterOrganisationResult</returns>
        public async System.Threading.Tasks.Task<RegisterOrganisationResult> PostOrganisationTenantsAsync(RegiserTenantDto? regiserTenantDto = default(RegiserTenantDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<RegisterOrganisationResult> localVarResponse = await PostOrganisationTenantsWithHttpInfoAsync(regiserTenantDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new tenant. This is only available to partner organisations. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regiserTenantDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegisterOrganisationResult)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<RegisterOrganisationResult>> PostOrganisationTenantsWithHttpInfoAsync(RegiserTenantDto? regiserTenantDto = default(RegiserTenantDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = regiserTenantDto;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisationTenants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RegisterOrganisationResult>("/v1/organisation/tenants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisationTenants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate new API token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrganisationTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TokenSuccessResponse</returns>
        public TokenSuccessResponse PostOrganisationTokens(NewOrganisationTokenDto? newOrganisationTokenDto = default(NewOrganisationTokenDto?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<TokenSuccessResponse> localVarResponse = PostOrganisationTokensWithHttpInfo(newOrganisationTokenDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate new API token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrganisationTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TokenSuccessResponse</returns>
        public Fingoti.Client.ApiResponse<TokenSuccessResponse> PostOrganisationTokensWithHttpInfo(NewOrganisationTokenDto? newOrganisationTokenDto = default(NewOrganisationTokenDto?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newOrganisationTokenDto;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisationTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TokenSuccessResponse>("/v1/organisation/tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisationTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate new API token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrganisationTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TokenSuccessResponse</returns>
        public async System.Threading.Tasks.Task<TokenSuccessResponse> PostOrganisationTokensAsync(NewOrganisationTokenDto? newOrganisationTokenDto = default(NewOrganisationTokenDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<TokenSuccessResponse> localVarResponse = await PostOrganisationTokensWithHttpInfoAsync(newOrganisationTokenDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate new API token. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newOrganisationTokenDto">User credentials. For a token to never expire, specify 0 for the expiry (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TokenSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<TokenSuccessResponse>> PostOrganisationTokensWithHttpInfoAsync(NewOrganisationTokenDto? newOrganisationTokenDto = default(NewOrganisationTokenDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = newOrganisationTokenDto;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisationTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TokenSuccessResponse>("/v1/organisation/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisationTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite a new user to the organisation. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PostOrganisationUsers(InviteUserDto? inviteUserDto = default(InviteUserDto?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PostOrganisationUsersWithHttpInfo(inviteUserDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invite a new user to the organisation. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PostOrganisationUsersWithHttpInfo(InviteUserDto? inviteUserDto = default(InviteUserDto?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inviteUserDto;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisationUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Default>("/v1/organisation/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisationUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite a new user to the organisation. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PostOrganisationUsersAsync(InviteUserDto? inviteUserDto = default(InviteUserDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PostOrganisationUsersWithHttpInfoAsync(inviteUserDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Invite a new user to the organisation. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteUserDto"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PostOrganisationUsersWithHttpInfoAsync(InviteUserDto? inviteUserDto = default(InviteUserDto?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = inviteUserDto;

            localVarRequestOptions.Operation = "OrganisationApi.PostOrganisationUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Default>("/v1/organisation/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOrganisationUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
