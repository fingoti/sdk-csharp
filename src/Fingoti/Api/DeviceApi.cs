/*
 * Fingoti API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Fingoti.Client;
using Fingoti.Model;

namespace Fingoti.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Unclaim a Fingoti device.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateResponse</returns>
        UpdateResponse DeleteDeviceId(string id, int operationIndex = 0);

        /// <summary>
        /// Unclaim a Fingoti device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        ApiResponse<UpdateResponse> DeleteDeviceIdWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get all devices.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdated"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClaimedDevicesDto</returns>
        ClaimedDevicesDto GetDevice(DateTime? lastUpdated = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// Get all devices.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdated"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClaimedDevicesDto</returns>
        ApiResponse<ClaimedDevicesDto> GetDeviceWithHttpInfo(DateTime? lastUpdated = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// Get specified device.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClaimedDeviceResponse</returns>
        ClaimedDeviceResponse GetDeviceId(string id, int operationIndex = 0);

        /// <summary>
        /// Get specified device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClaimedDeviceResponse</returns>
        ApiResponse<ClaimedDeviceResponse> GetDeviceIdWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get all nodes latched to a gateway.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceNodesResponse</returns>
        DeviceNodesResponse GetDeviceIdNodes(string id, int operationIndex = 0);

        /// <summary>
        /// Get all nodes latched to a gateway.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceNodesResponse</returns>
        ApiResponse<DeviceNodesResponse> GetDeviceIdNodesWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Update your Fingoti device.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchGateway"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        Default PatchDeviceId(string id, PatchGateway? patchGateway = default(PatchGateway?), int operationIndex = 0);

        /// <summary>
        /// Update your Fingoti device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchGateway"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        ApiResponse<Default> PatchDeviceIdWithHttpInfo(string id, PatchGateway? patchGateway = default(PatchGateway?), int operationIndex = 0);
        /// <summary>
        /// Claim a new Fingoti device.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimRequest">The claim object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClaimResult</returns>
        ClaimResult PostDevice(ClaimRequest? claimRequest = default(ClaimRequest?), int operationIndex = 0);

        /// <summary>
        /// Claim a new Fingoti device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimRequest">The claim object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClaimResult</returns>
        ApiResponse<ClaimResult> PostDeviceWithHttpInfo(ClaimRequest? claimRequest = default(ClaimRequest?), int operationIndex = 0);
        /// <summary>
        /// Send a request to a Fingoti device.
        /// </summary>
        /// <remarks>
        /// The payload object varies depending on the property used, please refer to our protocol documentation &lt;a href&#x3D;\&quot;https://help.fingoti.com\&quot;&gt;here&lt;/a&gt; for more infomation. &lt;br /&gt;   Multiple objects can be sent in the request array and will be executed in order.
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceRequest">The command object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MqttDeviceResponse</returns>
        MqttDeviceResponse PostDeviceSendrequest(DeviceRequest? deviceRequest = default(DeviceRequest?), int operationIndex = 0);

        /// <summary>
        /// Send a request to a Fingoti device.
        /// </summary>
        /// <remarks>
        /// The payload object varies depending on the property used, please refer to our protocol documentation &lt;a href&#x3D;\&quot;https://help.fingoti.com\&quot;&gt;here&lt;/a&gt; for more infomation. &lt;br /&gt;   Multiple objects can be sent in the request array and will be executed in order.
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceRequest">The command object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MqttDeviceResponse</returns>
        ApiResponse<MqttDeviceResponse> PostDeviceSendrequestWithHttpInfo(DeviceRequest? deviceRequest = default(DeviceRequest?), int operationIndex = 0);
        /// <summary>
        /// Initiate a device update.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MqttDeviceResponse</returns>
        MqttDeviceResponse PostDeviceUpdate(UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0);

        /// <summary>
        /// Initiate a device update.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MqttDeviceResponse</returns>
        ApiResponse<MqttDeviceResponse> PostDeviceUpdateWithHttpInfo(UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Unclaim a Fingoti device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateResponse</returns>
        System.Threading.Tasks.Task<UpdateResponse> DeleteDeviceIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unclaim a Fingoti device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateResponse>> DeleteDeviceIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all devices.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdated"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimedDevicesDto</returns>
        System.Threading.Tasks.Task<ClaimedDevicesDto> GetDeviceAsync(DateTime? lastUpdated = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all devices.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdated"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimedDevicesDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClaimedDevicesDto>> GetDeviceWithHttpInfoAsync(DateTime? lastUpdated = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get specified device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimedDeviceResponse</returns>
        System.Threading.Tasks.Task<ClaimedDeviceResponse> GetDeviceIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get specified device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimedDeviceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClaimedDeviceResponse>> GetDeviceIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all nodes latched to a gateway.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceNodesResponse</returns>
        System.Threading.Tasks.Task<DeviceNodesResponse> GetDeviceIdNodesAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all nodes latched to a gateway.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceNodesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceNodesResponse>> GetDeviceIdNodesWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update your Fingoti device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchGateway"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        System.Threading.Tasks.Task<Default> PatchDeviceIdAsync(string id, PatchGateway? patchGateway = default(PatchGateway?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update your Fingoti device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchGateway"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        System.Threading.Tasks.Task<ApiResponse<Default>> PatchDeviceIdWithHttpInfoAsync(string id, PatchGateway? patchGateway = default(PatchGateway?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Claim a new Fingoti device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimRequest">The claim object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimResult</returns>
        System.Threading.Tasks.Task<ClaimResult> PostDeviceAsync(ClaimRequest? claimRequest = default(ClaimRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Claim a new Fingoti device.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimRequest">The claim object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClaimResult>> PostDeviceWithHttpInfoAsync(ClaimRequest? claimRequest = default(ClaimRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send a request to a Fingoti device.
        /// </summary>
        /// <remarks>
        /// The payload object varies depending on the property used, please refer to our protocol documentation &lt;a href&#x3D;\&quot;https://help.fingoti.com\&quot;&gt;here&lt;/a&gt; for more infomation. &lt;br /&gt;   Multiple objects can be sent in the request array and will be executed in order.
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceRequest">The command object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MqttDeviceResponse</returns>
        System.Threading.Tasks.Task<MqttDeviceResponse> PostDeviceSendrequestAsync(DeviceRequest? deviceRequest = default(DeviceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send a request to a Fingoti device.
        /// </summary>
        /// <remarks>
        /// The payload object varies depending on the property used, please refer to our protocol documentation &lt;a href&#x3D;\&quot;https://help.fingoti.com\&quot;&gt;here&lt;/a&gt; for more infomation. &lt;br /&gt;   Multiple objects can be sent in the request array and will be executed in order.
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceRequest">The command object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MqttDeviceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MqttDeviceResponse>> PostDeviceSendrequestWithHttpInfoAsync(DeviceRequest? deviceRequest = default(DeviceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initiate a device update.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MqttDeviceResponse</returns>
        System.Threading.Tasks.Task<MqttDeviceResponse> PostDeviceUpdateAsync(UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initiate a device update.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MqttDeviceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MqttDeviceResponse>> PostDeviceUpdateWithHttpInfoAsync(UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeviceApi : IDeviceApiSync, IDeviceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeviceApi : IDeviceApi
    {
        private Fingoti.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeviceApi(string basePath)
        {
            this.Configuration = Fingoti.Client.Configuration.MergeConfigurations(
                Fingoti.Client.GlobalConfiguration.Instance,
                new Fingoti.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Fingoti.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeviceApi(Fingoti.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Fingoti.Client.Configuration.MergeConfigurations(
                Fingoti.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Fingoti.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Fingoti.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DeviceApi(Fingoti.Client.ISynchronousClient client, Fingoti.Client.IAsynchronousClient asyncClient, Fingoti.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Fingoti.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Fingoti.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Fingoti.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Fingoti.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Fingoti.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Unclaim a Fingoti device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateResponse</returns>
        public UpdateResponse DeleteDeviceId(string id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<UpdateResponse> localVarResponse = DeleteDeviceIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unclaim a Fingoti device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateResponse</returns>
        public Fingoti.Client.ApiResponse<UpdateResponse> DeleteDeviceIdWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Fingoti.Client.ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DeleteDeviceId");
            }

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.DeleteDeviceId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<UpdateResponse>("/v1/device/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDeviceId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unclaim a Fingoti device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateResponse</returns>
        public async System.Threading.Tasks.Task<UpdateResponse> DeleteDeviceIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<UpdateResponse> localVarResponse = await DeleteDeviceIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unclaim a Fingoti device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<UpdateResponse>> DeleteDeviceIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Fingoti.Client.ApiException(400, "Missing required parameter 'id' when calling DeviceApi->DeleteDeviceId");
            }


            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.DeleteDeviceId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<UpdateResponse>("/v1/device/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDeviceId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all devices. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdated"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClaimedDevicesDto</returns>
        public ClaimedDevicesDto GetDevice(DateTime? lastUpdated = default(DateTime?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<ClaimedDevicesDto> localVarResponse = GetDeviceWithHttpInfo(lastUpdated);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all devices. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdated"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClaimedDevicesDto</returns>
        public Fingoti.Client.ApiResponse<ClaimedDevicesDto> GetDeviceWithHttpInfo(DateTime? lastUpdated = default(DateTime?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdated != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "LastUpdated", lastUpdated));
            }

            localVarRequestOptions.Operation = "DeviceApi.GetDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClaimedDevicesDto>("/v1/device", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all devices. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdated"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimedDevicesDto</returns>
        public async System.Threading.Tasks.Task<ClaimedDevicesDto> GetDeviceAsync(DateTime? lastUpdated = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<ClaimedDevicesDto> localVarResponse = await GetDeviceWithHttpInfoAsync(lastUpdated, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all devices. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdated"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimedDevicesDto)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<ClaimedDevicesDto>> GetDeviceWithHttpInfoAsync(DateTime? lastUpdated = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdated != null)
            {
                localVarRequestOptions.QueryParameters.Add(Fingoti.Client.ClientUtils.ParameterToMultiMap("", "LastUpdated", lastUpdated));
            }

            localVarRequestOptions.Operation = "DeviceApi.GetDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClaimedDevicesDto>("/v1/device", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClaimedDeviceResponse</returns>
        public ClaimedDeviceResponse GetDeviceId(string id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<ClaimedDeviceResponse> localVarResponse = GetDeviceIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClaimedDeviceResponse</returns>
        public Fingoti.Client.ApiResponse<ClaimedDeviceResponse> GetDeviceIdWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Fingoti.Client.ApiException(400, "Missing required parameter 'id' when calling DeviceApi->GetDeviceId");
            }

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.GetDeviceId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClaimedDeviceResponse>("/v1/device/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeviceId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get specified device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimedDeviceResponse</returns>
        public async System.Threading.Tasks.Task<ClaimedDeviceResponse> GetDeviceIdAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<ClaimedDeviceResponse> localVarResponse = await GetDeviceIdWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get specified device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimedDeviceResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<ClaimedDeviceResponse>> GetDeviceIdWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Fingoti.Client.ApiException(400, "Missing required parameter 'id' when calling DeviceApi->GetDeviceId");
            }


            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.GetDeviceId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClaimedDeviceResponse>("/v1/device/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeviceId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all nodes latched to a gateway. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeviceNodesResponse</returns>
        public DeviceNodesResponse GetDeviceIdNodes(string id, int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<DeviceNodesResponse> localVarResponse = GetDeviceIdNodesWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all nodes latched to a gateway. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeviceNodesResponse</returns>
        public Fingoti.Client.ApiResponse<DeviceNodesResponse> GetDeviceIdNodesWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Fingoti.Client.ApiException(400, "Missing required parameter 'id' when calling DeviceApi->GetDeviceIdNodes");
            }

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.GetDeviceIdNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DeviceNodesResponse>("/v1/device/{id}/nodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeviceIdNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all nodes latched to a gateway. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceNodesResponse</returns>
        public async System.Threading.Tasks.Task<DeviceNodesResponse> GetDeviceIdNodesAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<DeviceNodesResponse> localVarResponse = await GetDeviceIdNodesWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all nodes latched to a gateway. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Device ID to query.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceNodesResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<DeviceNodesResponse>> GetDeviceIdNodesWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Fingoti.Client.ApiException(400, "Missing required parameter 'id' when calling DeviceApi->GetDeviceIdNodes");
            }


            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DeviceApi.GetDeviceIdNodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DeviceNodesResponse>("/v1/device/{id}/nodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeviceIdNodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update your Fingoti device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchGateway"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Default</returns>
        public Default PatchDeviceId(string id, PatchGateway? patchGateway = default(PatchGateway?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = PatchDeviceIdWithHttpInfo(id, patchGateway);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update your Fingoti device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchGateway"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Default</returns>
        public Fingoti.Client.ApiResponse<Default> PatchDeviceIdWithHttpInfo(string id, PatchGateway? patchGateway = default(PatchGateway?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Fingoti.Client.ApiException(400, "Missing required parameter 'id' when calling DeviceApi->PatchDeviceId");
            }

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchGateway;

            localVarRequestOptions.Operation = "DeviceApi.PatchDeviceId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Default>("/v1/device/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDeviceId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update your Fingoti device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchGateway"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Default</returns>
        public async System.Threading.Tasks.Task<Default> PatchDeviceIdAsync(string id, PatchGateway? patchGateway = default(PatchGateway?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<Default> localVarResponse = await PatchDeviceIdWithHttpInfoAsync(id, patchGateway, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update your Fingoti device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchGateway"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Default)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<Default>> PatchDeviceIdWithHttpInfoAsync(string id, PatchGateway? patchGateway = default(PatchGateway?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Fingoti.Client.ApiException(400, "Missing required parameter 'id' when calling DeviceApi->PatchDeviceId");
            }


            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Fingoti.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchGateway;

            localVarRequestOptions.Operation = "DeviceApi.PatchDeviceId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Default>("/v1/device/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDeviceId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Claim a new Fingoti device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimRequest">The claim object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClaimResult</returns>
        public ClaimResult PostDevice(ClaimRequest? claimRequest = default(ClaimRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<ClaimResult> localVarResponse = PostDeviceWithHttpInfo(claimRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Claim a new Fingoti device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimRequest">The claim object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClaimResult</returns>
        public Fingoti.Client.ApiResponse<ClaimResult> PostDeviceWithHttpInfo(ClaimRequest? claimRequest = default(ClaimRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = claimRequest;

            localVarRequestOptions.Operation = "DeviceApi.PostDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClaimResult>("/v1/device", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Claim a new Fingoti device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimRequest">The claim object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimResult</returns>
        public async System.Threading.Tasks.Task<ClaimResult> PostDeviceAsync(ClaimRequest? claimRequest = default(ClaimRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<ClaimResult> localVarResponse = await PostDeviceWithHttpInfoAsync(claimRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Claim a new Fingoti device. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimRequest">The claim object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimResult)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<ClaimResult>> PostDeviceWithHttpInfoAsync(ClaimRequest? claimRequest = default(ClaimRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = claimRequest;

            localVarRequestOptions.Operation = "DeviceApi.PostDevice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClaimResult>("/v1/device", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDevice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a request to a Fingoti device. The payload object varies depending on the property used, please refer to our protocol documentation &lt;a href&#x3D;\&quot;https://help.fingoti.com\&quot;&gt;here&lt;/a&gt; for more infomation. &lt;br /&gt;   Multiple objects can be sent in the request array and will be executed in order.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceRequest">The command object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MqttDeviceResponse</returns>
        public MqttDeviceResponse PostDeviceSendrequest(DeviceRequest? deviceRequest = default(DeviceRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<MqttDeviceResponse> localVarResponse = PostDeviceSendrequestWithHttpInfo(deviceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a request to a Fingoti device. The payload object varies depending on the property used, please refer to our protocol documentation &lt;a href&#x3D;\&quot;https://help.fingoti.com\&quot;&gt;here&lt;/a&gt; for more infomation. &lt;br /&gt;   Multiple objects can be sent in the request array and will be executed in order.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceRequest">The command object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MqttDeviceResponse</returns>
        public Fingoti.Client.ApiResponse<MqttDeviceResponse> PostDeviceSendrequestWithHttpInfo(DeviceRequest? deviceRequest = default(DeviceRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deviceRequest;

            localVarRequestOptions.Operation = "DeviceApi.PostDeviceSendrequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MqttDeviceResponse>("/v1/device/sendrequest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDeviceSendrequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send a request to a Fingoti device. The payload object varies depending on the property used, please refer to our protocol documentation &lt;a href&#x3D;\&quot;https://help.fingoti.com\&quot;&gt;here&lt;/a&gt; for more infomation. &lt;br /&gt;   Multiple objects can be sent in the request array and will be executed in order.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceRequest">The command object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MqttDeviceResponse</returns>
        public async System.Threading.Tasks.Task<MqttDeviceResponse> PostDeviceSendrequestAsync(DeviceRequest? deviceRequest = default(DeviceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<MqttDeviceResponse> localVarResponse = await PostDeviceSendrequestWithHttpInfoAsync(deviceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send a request to a Fingoti device. The payload object varies depending on the property used, please refer to our protocol documentation &lt;a href&#x3D;\&quot;https://help.fingoti.com\&quot;&gt;here&lt;/a&gt; for more infomation. &lt;br /&gt;   Multiple objects can be sent in the request array and will be executed in order.
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceRequest">The command object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MqttDeviceResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<MqttDeviceResponse>> PostDeviceSendrequestWithHttpInfoAsync(DeviceRequest? deviceRequest = default(DeviceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deviceRequest;

            localVarRequestOptions.Operation = "DeviceApi.PostDeviceSendrequest";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MqttDeviceResponse>("/v1/device/sendrequest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDeviceSendrequest", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate a device update. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MqttDeviceResponse</returns>
        public MqttDeviceResponse PostDeviceUpdate(UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0)
        {
            Fingoti.Client.ApiResponse<MqttDeviceResponse> localVarResponse = PostDeviceUpdateWithHttpInfo(updateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate a device update. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MqttDeviceResponse</returns>
        public Fingoti.Client.ApiResponse<MqttDeviceResponse> PostDeviceUpdateWithHttpInfo(UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0)
        {
            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "DeviceApi.PostDeviceUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MqttDeviceResponse>("/v1/device/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDeviceUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initiate a device update. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MqttDeviceResponse</returns>
        public async System.Threading.Tasks.Task<MqttDeviceResponse> PostDeviceUpdateAsync(UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Fingoti.Client.ApiResponse<MqttDeviceResponse> localVarResponse = await PostDeviceUpdateWithHttpInfoAsync(updateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate a device update. 
        /// </summary>
        /// <exception cref="Fingoti.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MqttDeviceResponse)</returns>
        public async System.Threading.Tasks.Task<Fingoti.Client.ApiResponse<MqttDeviceResponse>> PostDeviceUpdateWithHttpInfoAsync(UpdateRequest? updateRequest = default(UpdateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Fingoti.Client.RequestOptions localVarRequestOptions = new Fingoti.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Fingoti.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Fingoti.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateRequest;

            localVarRequestOptions.Operation = "DeviceApi.PostDeviceUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MqttDeviceResponse>("/v1/device/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDeviceUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
